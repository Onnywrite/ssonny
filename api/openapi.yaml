openapi: 3.0.3
info:
  title: sso.onnywrite.com (ssonny) OpenAPI
  description: |-
    This is the OpenAPI documentation for sso.onnywrite.com. 
    Please note that the API is currently under development and may undergo incompatible changes.
    Each endpoint is currently returning a 500 status code.
  version: 0.1.0
servers:
  - url: https://sso.onnywrite.com/api
tags:
  - name: auth
    description: Authentication endpoints for user login and registration.
  - name: dev
    description: Endpoints for development purposes.
  - name: users
    description: Manage personal user accounts and profiles.
  - name: oauth
    description: OAuth2 endpoints for external application integration.
  - name: internal
    description: Technical endpoints for internal use. You likely won't need these.
paths:
  /ping:
    get:
      tags:
        - internal
      summary: Check if the server is responsive.
      responses:
        "200":
          description: The server is alive and responding.
          content:
            text/plain:
              schema:
                type: string
                format: pong
                example: pong
  /healthz:
    get:
      tags:
        - internal
      summary: Check the server's health status.
      description: Used for Kubernetes health checks.
      responses:
        "200":
          description: The server is healthy.
          content:
            text/plain:
              schema:
                type: string
                format: ok
                example: ok
  /metrics:
    get:
      tags:
        - internal
      summary: Retrieve OpenTelemetry metrics.
      responses:
        "200":
          description: OpenTelemetry metrics data.
          content:
            application/json:
              schema:
                type: object
                format: otel
  /auth/registerWithPassword:
    post:
      tags:
        - auth
      summary: Register a new user with password authentication.
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      requestBody:
        $ref: "#/components/requestBodies/RegisterWithPassword"
      responses:
        "201":
          description: The user has been successfully registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticatedUser"
        "400":
          description: The provided input is invalid. Please check the error details for more information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "409":
          description: A user with the provided email or nickname already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
  /auth/loginWithPassword:
    post:
      tags:
        - auth
      summary: Log in a user with their password.
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      requestBody:
          $ref: "#/components/requestBodies/LoginWithPassword"
      responses:
        "200":
          description: The user has successfully logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticatedUser"
        "400":
          description: The provided input is invalid. Please check the error details for more information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "404":
          description: The provided credentials are invalid. Please check your email/nickname and password.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh access and refresh tokens.
      description: |-
        Use this endpoint to refresh your access token when it expires. 
        Provide your refresh token, and you'll receive new access and refresh tokens.
        Remember to update both tokens in your storage, as refresh token rotation is supported.
      requestBody:
        $ref: "#/components/requestBodies/Refresh"
      responses:
        "200":
          description: Your access and refresh tokens have been successfully refreshed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        "401":
          description: Your refresh token is invalid. Please log in again.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
  /auth/check:
    get:
      tags:
        - auth 
      security:
        - BearerAuth: []
      summary: Verify access token validity.
      description: |-
        This endpoint checks if the access token provided in the Authorization header is valid.
      responses:
        "200":
          description: Your access token is valid, and you are authenticated.
        "401":
          description: Your access token is invalid. Please refresh it using /auth/refresh.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
  /auth/verify/email:
    post:
      tags:
        - auth
      summary: Verify a user's email address.
      description: |-
        To verify their email, the user will receive a link that leads to a verification page. 
        Upon visiting the page, a POST request is sent to this endpoint with the provided token. 
        The backend will then respond with the verification status. 
        This endpoint is idempotent, meaning you can send multiple requests with the same valid token.
      parameters:
      - $ref: "#/components/parameters/EmailToken"
      responses:
        "200":
          description: The email address has been successfully verified.
        "400":
          description: The provided verification token is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
  /auth/logout:
    post:
      tags:
        - auth
      summary: Log out a user.
      description: This action invalidates the user's refresh token and is idempotent, allowing for multiple logout requests without errors.
      requestBody:
        $ref: "#/components/requestBodies/Refresh"
      responses:
        "200":
          description: The user has been successfully logged out.
        "401":
          description: |-
           The refresh token is either expired or invalid. Please redirect the user to the login page.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
  /profile:
    get:
      tags:
        - users
      security:
        - BearerAuth: ["get:profile", "profile"]
      summary: Retrieve a user's profile.
      responses:
        "200":
          description: The user's profile information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "401":
          description: Your access token is invalid. Please refresh it using /auth/refresh.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
        "403":
          description: You do not have permission to access this resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
        "404":
          description: The requested user profile does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
    put:
      tags:
        - users
      security:
        - BearerAuth: ["put:profile", "profile"]
      summary: Update a user's profile.
      requestBody:
        $ref: "#/components/requestBodies/UpdateProfile"
      responses:
        "200":
          description: The user's profile has been successfully updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "400":
          description: The provided input is invalid. Please check the error details for more information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Your access token is invalid. Please refresh it using /auth/refresh.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
        "403":
          description: You do not have permission to change this resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
        "404":
          description: The user profile you are trying to update does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
  /profile/password:
    put:
      tags:
        - users
      security:
        - BearerAuth: ["put:profile/password"]
      summary: Update a user's password.
      description: Granting access to this endpoint is extremely dangerous.
      requestBody:
        $ref: "#/components/requestBodies/UpdatePassword"
      responses:
        "200":
          description: The user's password has been successfully updated.
        "400":
          description: The provided input is invalid. Please check the error details for more information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Your access token is invalid. Please refresh it using /auth/refresh.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
        "403":
          description: You do not have permission to change this resource.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
        "404":
          description: The user profile doesn't exist or the provided credentials are incorrect.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Err"
components:
  parameters:
    EmailToken:
      name: token
      in: query
      description: The unique token for email verification.
      required: true
      schema:
        type: string
    UserAgent:
      name: User-Agent
      in: header
      description: Standard HTTP header sent by most browsers. You can typically ignore this.
      required: true
      schema:
        type: string
  schemas:
    ValidationError:
      type: object
      required:
        - Service
        - Fields
      properties:
        Service:
          type: string
          enum:
            - ssonny
        Fields:
          type: object
          format: field+error
          additionalProperties: true
          example:
            Name: Name must be at least 8 characters in length
            Email: Email must be a valid email address
    Err:
      type: object
      required:
        - Service
        - Message
      properties:
        Service:
          type: string
          enum:
            - ssonny
        Message:
          type: string
          example: "something went wrong"
    AuthenticatedUser:
      type: object
      required:
        - Access
        - Refresh
        - Profile
      properties:
        Access:
          type: string
          example: "<here_can_be_anything>"
        Refresh:
          type: string
          example: "<here_can_be_anything>"
        Profile:
          $ref: "#/components/schemas/Profile"
    Profile:
      type: object
      required:
        - Id
        - Email
        - Verified
        - CreatedAt
        - UpdatedAt
      properties:
        Id:
          type: string
          format: uuid
          x-go-type: googleuuid.UUID
          x-go-type-import:
            path: github.com/google/uuid
            name: googleuuid
          example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
        Nickname:
          type: string
          example: Egor 123 Ochen Krutoi
        Email:
          type: string
          format: email
          example: egor123ochenkrutoi@example.com
          x-go-type: string
        Gender:
          type: string
          format: string
          example: male
        Verified:
          type: boolean
          example: false
        Birthday:
          type: string
          format: date
          example: "1945-05-09"
          x-go-type: string
        CreatedAt:
          type: string
          format: date-time
          example: "2024-10-04T22:33:55.999+03:00"
        UpdatedAt:
          type: string
          format: date-time
          example: "2024-10-04T22:33:55.999+03:00"
    Tokens:
      type: object
      required:
        - Refresh
        - Access
      properties:
        Refresh:
          type: string
          example: "<here_can_be_anything>"
        Access:
          type: string
          example: "<here_can_be_anything>"
  requestBodies:
    Refresh:
      description: Provide your refresh token to refresh your access token.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - RefreshToken
            properties:
              RefreshToken:
                type: string
                example: "<here_can_be_anything>"
    RegisterWithPassword:
      description: Provide user details for registration.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - Email
              - Password
            properties:
              Nickname:
                type: string
                example: Egor 123 Ochen Krutoi
                minLength: 3
                maxLength: 32
                x-oapi-codegen-extra-tags:
                  validate: "omitempty,min=3,max=32"
              Email:
                type: string
                format: email
                example: egor123ochenkrutoi@example.com
                maxLength: 345
                x-go-type: string
                x-oapi-codegen-extra-tags:
                  validate: "email,max=345"
              Gender:
                type: string
                example: male
                maxLength: 16
                x-oapi-codegen-extra-tags:
                  validate: "omitempty,max=16"
              Birthday:
                type: string
                format: date
                example: "1945-05-09"
                x-go-type: string
                x-oapi-codegen-extra-tags:
                  validate: "omitempty,datetime=2006-01-02"
              Password:
                type: string
                example: "1234 $pace"
                minLength: 8
                maxLength: 72
                x-oapi-codegen-extra-tags:
                  validate: "min=8,max=72"
    LoginWithPassword:
      description: Provide your email or nickname and password to log in.
      required: true
      content:
        application/json:
          schema:
           type: object
           required:
             - Password
           properties:
             Email:
               type: string
               format: email
               example: egor123ochenkrutoi@example.com
               maxLength: 345
               x-go-type: string
               x-oapi-codegen-extra-tags:
                 validate: "omitempty,email,max=345"
             Nickname:
               type: string
               example: Egor 123 Ochen Krutoi
               minLength: 3
               maxLength: 32
               x-oapi-codegen-extra-tags:
                 validate: "omitempty,min=3,max=32"
             Password:
               type: string
               example: "1234 $pace"
               minLength: 8
               maxLength: 72
               x-oapi-codegen-extra-tags:
                 validate: "min=8,max=72"
    UpdateProfile:
      description: |
        Provide the user's profile information to update.
        All fields will be updated, regardless of whether they are provided or not.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              Nickname:
                type: string
                example: Egor 123 Ochen Krutoi
                minLength: 3
                maxLength: 32
                x-oapi-codegen-extra-tags:
                  validate: "omitempty,min=3,max=32"
              Gender:
                type: string
                example: male
                maxLength: 16
                x-oapi-codegen-extra-tags:
                  validate: "omitempty,max=16"
              Birthday:
                type: string
                format: date
                example: "1945-05-09"
                x-go-type: string
                x-oapi-codegen-extra-tags:
                  validate: "omitempty,datetime=2006-01-02"
    UpdatePassword:
      description: Provide the user's current password and the new password to update.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - CurrentPassword
              - NewPassword
            properties:
              CurrentPassword:
                type: string
                example: "1234 $pace"
                minLength: 8
                maxLength: 72
                x-oapi-codegen-extra-tags:
                  validate: "min=8,max=72"
              NewPassword:
                type: string
                example: "some_n3WpA$$w0D"
                minLength: 8
                maxLength: 72
                x-oapi-codegen-extra-tags:
                  validate: "min=8,max=72"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
