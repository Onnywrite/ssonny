// Package httpapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package httpapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	validator "github.com/go-playground/validator/v10"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
) // ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user by their password and email or nickname
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(c fiber.Ctx, params PostAuthLoginWithPasswordParams) error
	// Login user by their password and email or nickname
	// (POST /auth/logout)
	PostAuthLogout(c fiber.Ctx) error
	// Refreshes expired access and unexpired refresh tokens
	// (POST /auth/refresh)
	PostAuthRefresh(c fiber.Ctx) error
	// Registrates user by a password and email or nickname
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(c fiber.Ctx, params PostAuthRegisterWithPasswordParams) error
	// Verifies the user's email.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(c fiber.Ctx, params PostAuthVerifyEmailParams) error
	// The server's health probes
	// (GET /healthz)
	GetHealthz(c fiber.Ctx) error
	// OpenTelemetry metrics
	// (GET /metrics)
	GetMetrics(c fiber.Ctx) error
	// Pings the server
	// (GET /ping)
	GetPing(c fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostAuthLoginWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLoginWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLoginWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Optional header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = &UserAgent

	}

	return siw.Handler.PostAuthLoginWithPassword(c, params)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c fiber.Ctx) error {

	return siw.Handler.PostAuthLogout(c)
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(c fiber.Ctx) error {

	return siw.Handler.PostAuthRefresh(c)
}

// PostAuthRegisterWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegisterWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRegisterWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Optional header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = &UserAgent

	}

	return siw.Handler.PostAuthRegisterWithPassword(c, params)
}

// PostAuthVerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) PostAuthVerifyEmail(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthVerifyEmailParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "token" -------------

	if paramValue := c.Query("token"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument token is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "token", query, &params.Token)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter token: %w", err).Error())
	}

	return siw.Handler.PostAuthVerifyEmail(c, params)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c fiber.Ctx) error {

	return siw.Handler.GetHealthz(c)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c fiber.Ctx) error {

	return siw.Handler.GetMetrics(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c fiber.Ctx) error {

	return siw.Handler.GetPing(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/auth/loginWithPassword", wrapper.PostAuthLoginWithPassword)

	router.Post(options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)

	router.Post(options.BaseURL+"/auth/refresh", wrapper.PostAuthRefresh)

	router.Post(options.BaseURL+"/auth/registerWithPassword", wrapper.PostAuthRegisterWithPassword)

	router.Post(options.BaseURL+"/auth/verify/email", wrapper.PostAuthVerifyEmail)

	router.Get(options.BaseURL+"/healthz", wrapper.GetHealthz)

	router.Get(options.BaseURL+"/metrics", wrapper.GetMetrics)

	router.Get(options.BaseURL+"/ping", wrapper.GetPing)

}

type PostAuthLoginWithPasswordRequestObject struct {
	Params PostAuthLoginWithPasswordParams
	Body   *PostAuthLoginWithPasswordJSONRequestBody
}

type PostAuthLoginWithPasswordResponseObject interface {
	VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthLoginWithPassword200JSONResponse AuthenticatedUser

func (response PostAuthLoginWithPassword200JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword400JSONResponse Err

func (response PostAuthLoginWithPassword400JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword404JSONResponse Err

func (response PostAuthLoginWithPassword404JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostAuthLogoutRequestObject struct {
	Body *PostAuthLogoutJSONRequestBody
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(ctx fiber.Ctx) error
}

type PostAuthLogout200Response struct {
}

func (response PostAuthLogout200Response) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthLogout401Response struct {
}

func (response PostAuthLogout401Response) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Status(401)
	return nil
}

type PostAuthRefreshRequestObject struct {
	Body *PostAuthRefreshJSONRequestBody
}

type PostAuthRefreshResponseObject interface {
	VisitPostAuthRefreshResponse(ctx fiber.Ctx) error
}

type PostAuthRefresh200JSONResponse Tokens

func (response PostAuthRefresh200JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthRefresh401JSONResponse Err

func (response PostAuthRefresh401JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPasswordRequestObject struct {
	Params PostAuthRegisterWithPasswordParams
	Body   *PostAuthRegisterWithPasswordJSONRequestBody
}

type PostAuthRegisterWithPasswordResponseObject interface {
	VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthRegisterWithPassword201JSONResponse AuthenticatedUser

func (response PostAuthRegisterWithPassword201JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword400JSONResponse Err

func (response PostAuthRegisterWithPassword400JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword409JSONResponse Err

func (response PostAuthRegisterWithPassword409JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PostAuthVerifyEmailRequestObject struct {
	Params PostAuthVerifyEmailParams
}

type PostAuthVerifyEmailResponseObject interface {
	VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error
}

type PostAuthVerifyEmail200Response struct {
}

func (response PostAuthVerifyEmail200Response) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthVerifyEmail400JSONResponse Err

func (response PostAuthVerifyEmail400JSONResponse) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetHealthzRequestObject struct {
}

type GetHealthzResponseObject interface {
	VisitGetHealthzResponse(ctx fiber.Ctx) error
}

type GetHealthz200TextResponse string

func (response GetHealthz200TextResponse) VisitGetHealthzResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(ctx fiber.Ctx) error
}

type GetMetrics200JSONResponse map[string]interface{}

func (response GetMetrics200JSONResponse) VisitGetMetricsResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(ctx fiber.Ctx) error
}

type GetPing200TextResponse string

func (response GetPing200TextResponse) VisitGetPingResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

// validation by https://github.com/Onnywrite
var validate = validator.New(validator.WithRequiredStructEnabled())

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Login user by their password and email or nickname
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(ctx context.Context, request PostAuthLoginWithPasswordRequestObject) (PostAuthLoginWithPasswordResponseObject, error)
	// Login user by their password and email or nickname
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Refreshes expired access and unexpired refresh tokens
	// (POST /auth/refresh)
	PostAuthRefresh(ctx context.Context, request PostAuthRefreshRequestObject) (PostAuthRefreshResponseObject, error)
	// Registrates user by a password and email or nickname
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(ctx context.Context, request PostAuthRegisterWithPasswordRequestObject) (PostAuthRegisterWithPasswordResponseObject, error)
	// Verifies the user's email.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(ctx context.Context, request PostAuthVerifyEmailRequestObject) (PostAuthVerifyEmailResponseObject, error)
	// The server's health probes
	// (GET /healthz)
	GetHealthz(ctx context.Context, request GetHealthzRequestObject) (GetHealthzResponseObject, error)
	// OpenTelemetry metrics
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// Pings the server
	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)
}
type StrictHandlerFunc func(ctx fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuthLoginWithPassword operation middleware
func (sh *strictHandler) PostAuthLoginWithPassword(ctx fiber.Ctx, params PostAuthLoginWithPasswordParams) error {
	var request PostAuthLoginWithPasswordRequestObject

	request.Params = params

	var body PostAuthLoginWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := validate.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthLoginWithPassword400JSONResponse{
			ErrorMessage: err.Error(),
			Service:      Ssonny,
		}.VisitPostAuthLoginWithPasswordResponse(ctx)
	}

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLoginWithPassword(ctx.UserContext(), request.(PostAuthLoginWithPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLoginWithPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthLoginWithPasswordResponseObject); ok {
		if err := validResponse.VisitPostAuthLoginWithPasswordResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx fiber.Ctx) error {
	var request PostAuthLogoutRequestObject

	var body PostAuthLogoutJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogout(ctx.UserContext(), request.(PostAuthLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthLogoutResponseObject); ok {
		if err := validResponse.VisitPostAuthLogoutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRefresh operation middleware
func (sh *strictHandler) PostAuthRefresh(ctx fiber.Ctx) error {
	var request PostAuthRefreshRequestObject

	var body PostAuthRefreshJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefresh(ctx.UserContext(), request.(PostAuthRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefresh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthRefreshResponseObject); ok {
		if err := validResponse.VisitPostAuthRefreshResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRegisterWithPassword operation middleware
func (sh *strictHandler) PostAuthRegisterWithPassword(ctx fiber.Ctx, params PostAuthRegisterWithPasswordParams) error {
	var request PostAuthRegisterWithPasswordRequestObject

	request.Params = params

	var body PostAuthRegisterWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := validate.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthRegisterWithPassword400JSONResponse{
			ErrorMessage: err.Error(),
			Service:      Ssonny,
		}.VisitPostAuthRegisterWithPasswordResponse(ctx)
	}

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRegisterWithPassword(ctx.UserContext(), request.(PostAuthRegisterWithPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRegisterWithPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthRegisterWithPasswordResponseObject); ok {
		if err := validResponse.VisitPostAuthRegisterWithPasswordResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthVerifyEmail operation middleware
func (sh *strictHandler) PostAuthVerifyEmail(ctx fiber.Ctx, params PostAuthVerifyEmailParams) error {
	var request PostAuthVerifyEmailRequestObject

	request.Params = params

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthVerifyEmail(ctx.UserContext(), request.(PostAuthVerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthVerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthVerifyEmailResponseObject); ok {
		if err := validResponse.VisitPostAuthVerifyEmailResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetHealthz operation middleware
func (sh *strictHandler) GetHealthz(ctx fiber.Ctx) error {
	var request GetHealthzRequestObject

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthz(ctx.UserContext(), request.(GetHealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthz")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetHealthzResponseObject); ok {
		if err := validResponse.VisitGetHealthzResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(ctx fiber.Ctx) error {
	var request GetMetricsRequestObject

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMetrics(ctx.UserContext(), request.(GetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMetricsResponseObject); ok {
		if err := validResponse.VisitGetMetricsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx fiber.Ctx) error {
	var request GetPingRequestObject

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx.UserContext(), request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
