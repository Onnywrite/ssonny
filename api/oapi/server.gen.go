// Package httpapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package httpapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	fmtvalidate "github.com/Onnywrite/ssonny/pkg/fmtvalidate"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
) // ServerInterface represents all server handlers.
type ServerInterface interface {
	// Verify access token validity.
	// (GET /auth/check)
	GetAuthCheck(c fiber.Ctx) error
	// Log in a user with their password.
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(c fiber.Ctx, params PostAuthLoginWithPasswordParams) error
	// Log out a user.
	// (POST /auth/logout)
	PostAuthLogout(c fiber.Ctx) error
	// Refresh access and refresh tokens.
	// (POST /auth/refresh)
	PostAuthRefresh(c fiber.Ctx) error
	// Register a new user with password authentication.
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(c fiber.Ctx, params PostAuthRegisterWithPasswordParams) error
	// Verify a user's email address.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(c fiber.Ctx, params PostAuthVerifyEmailParams) error
	// Check the server's health status.
	// (GET /healthz)
	GetHealthz(c fiber.Ctx) error
	// Retrieve OpenTelemetry metrics.
	// (GET /metrics)
	GetMetrics(c fiber.Ctx) error
	// Check if the server is responsive.
	// (GET /ping)
	GetPing(c fiber.Ctx) error
	// Retrieve a user's profile.
	// (GET /profile)
	GetProfile(c fiber.Ctx) error
	// Update a user's profile.
	// (PUT /profile)
	PutProfile(c fiber.Ctx) error
	// Update a user's password.
	// (PUT /profile/password)
	PutProfilePassword(c fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAuthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetAuthCheck(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{})

	return siw.Handler.GetAuthCheck(c)
}

// PostAuthLoginWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLoginWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLoginWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthLoginWithPassword(c, params)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c fiber.Ctx) error {

	return siw.Handler.PostAuthLogout(c)
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(c fiber.Ctx) error {

	return siw.Handler.PostAuthRefresh(c)
}

// PostAuthRegisterWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegisterWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRegisterWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthRegisterWithPassword(c, params)
}

// PostAuthVerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) PostAuthVerifyEmail(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthVerifyEmailParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "token" -------------

	if paramValue := c.Query("token"); paramValue != "" {

	} else {
		err = fmt.Errorf("query argument token is required, but not found")
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	err = runtime.BindQueryParameter("form", true, true, "token", query, &params.Token)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter token: %w", err).Error())
	}

	return siw.Handler.PostAuthVerifyEmail(c, params)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c fiber.Ctx) error {

	return siw.Handler.GetHealthz(c)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c fiber.Ctx) error {

	return siw.Handler.GetMetrics(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c fiber.Ctx) error {

	return siw.Handler.GetPing(c)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"get:profile", "profile"})

	return siw.Handler.GetProfile(c)
}

// PutProfile operation middleware
func (siw *ServerInterfaceWrapper) PutProfile(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"put:profile", "profile"})

	return siw.Handler.PutProfile(c)
}

// PutProfilePassword operation middleware
func (siw *ServerInterfaceWrapper) PutProfilePassword(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"put:profile/password"})

	return siw.Handler.PutProfilePassword(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	Middlewares         []fiber.Handler
	EndpointMiddlewares map[string][]fiber.Handler
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// created by github.com/Onnywrite
// Constants for all endpoints
const (
	// GET /auth/check: Verify access token validity.
	EP_GetAuthCheck = "GET /auth/check"
	// POST /auth/loginWithPassword: Log in a user with their password.
	EP_PostAuthLoginWithPassword = "POST /auth/loginWithPassword"
	// POST /auth/logout: Log out a user.
	EP_PostAuthLogout = "POST /auth/logout"
	// POST /auth/refresh: Refresh access and refresh tokens.
	EP_PostAuthRefresh = "POST /auth/refresh"
	// POST /auth/registerWithPassword: Register a new user with password authentication.
	EP_PostAuthRegisterWithPassword = "POST /auth/registerWithPassword"
	// POST /auth/verify/email: Verify a user's email address.
	EP_PostAuthVerifyEmail = "POST /auth/verify/email"
	// GET /healthz: Check the server's health status.
	EP_GetHealthz = "GET /healthz"
	// GET /metrics: Retrieve OpenTelemetry metrics.
	EP_GetMetrics = "GET /metrics"
	// GET /ping: Check if the server is responsive.
	EP_GetPing = "GET /ping"
	// GET /profile: Retrieve a user's profile.
	EP_GetProfile = "GET /profile"
	// PUT /profile: Update a user's profile.
	EP_PutProfile = "PUT /profile"
	// PUT /profile/password: Update a user's password.
	EP_PutProfilePassword = "PUT /profile/password"
)

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	mws := func(ep string) []fiber.Handler {
		return options.EndpointMiddlewares[ep]
	}

	router.Get("/auth/check", wrapper.GetAuthCheck, mws(EP_GetAuthCheck)...)
	router.Post("/auth/loginWithPassword", wrapper.PostAuthLoginWithPassword, mws(EP_PostAuthLoginWithPassword)...)
	router.Post("/auth/logout", wrapper.PostAuthLogout, mws(EP_PostAuthLogout)...)
	router.Post("/auth/refresh", wrapper.PostAuthRefresh, mws(EP_PostAuthRefresh)...)
	router.Post("/auth/registerWithPassword", wrapper.PostAuthRegisterWithPassword, mws(EP_PostAuthRegisterWithPassword)...)
	router.Post("/auth/verify/email", wrapper.PostAuthVerifyEmail, mws(EP_PostAuthVerifyEmail)...)
	router.Get("/healthz", wrapper.GetHealthz, mws(EP_GetHealthz)...)
	router.Get("/metrics", wrapper.GetMetrics, mws(EP_GetMetrics)...)
	router.Get("/ping", wrapper.GetPing, mws(EP_GetPing)...)
	router.Get("/profile", wrapper.GetProfile, mws(EP_GetProfile)...)
	router.Put("/profile", wrapper.PutProfile, mws(EP_PutProfile)...)
	router.Put("/profile/password", wrapper.PutProfilePassword, mws(EP_PutProfilePassword)...)

}

type GetAuthCheckRequestObject struct {
}

type GetAuthCheckResponseObject interface {
	VisitGetAuthCheckResponse(ctx fiber.Ctx) error
}

type GetAuthCheck200Response struct {
}

func (response GetAuthCheck200Response) VisitGetAuthCheckResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetAuthCheck401JSONResponse Err

func (response GetAuthCheck401JSONResponse) VisitGetAuthCheckResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPasswordRequestObject struct {
	Params PostAuthLoginWithPasswordParams
	Body   *PostAuthLoginWithPasswordJSONRequestBody
}

type PostAuthLoginWithPasswordResponseObject interface {
	VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthLoginWithPassword200JSONResponse AuthenticatedUser

func (response PostAuthLoginWithPassword200JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword400JSONResponse ValidationError

func (response PostAuthLoginWithPassword400JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword404JSONResponse Err

func (response PostAuthLoginWithPassword404JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostAuthLogoutRequestObject struct {
	Body *PostAuthLogoutJSONRequestBody
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(ctx fiber.Ctx) error
}

type PostAuthLogout200Response struct {
}

func (response PostAuthLogout200Response) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthLogout401JSONResponse Err

func (response PostAuthLogout401JSONResponse) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRefreshRequestObject struct {
	Body *PostAuthRefreshJSONRequestBody
}

type PostAuthRefreshResponseObject interface {
	VisitPostAuthRefreshResponse(ctx fiber.Ctx) error
}

type PostAuthRefresh200JSONResponse Tokens

func (response PostAuthRefresh200JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthRefresh401JSONResponse Err

func (response PostAuthRefresh401JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPasswordRequestObject struct {
	Params PostAuthRegisterWithPasswordParams
	Body   *PostAuthRegisterWithPasswordJSONRequestBody
}

type PostAuthRegisterWithPasswordResponseObject interface {
	VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthRegisterWithPassword201JSONResponse AuthenticatedUser

func (response PostAuthRegisterWithPassword201JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword400JSONResponse ValidationError

func (response PostAuthRegisterWithPassword400JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword409JSONResponse Err

func (response PostAuthRegisterWithPassword409JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PostAuthVerifyEmailRequestObject struct {
	Params PostAuthVerifyEmailParams
}

type PostAuthVerifyEmailResponseObject interface {
	VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error
}

type PostAuthVerifyEmail200Response struct {
}

func (response PostAuthVerifyEmail200Response) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthVerifyEmail400JSONResponse ValidationError

func (response PostAuthVerifyEmail400JSONResponse) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetHealthzRequestObject struct {
}

type GetHealthzResponseObject interface {
	VisitGetHealthzResponse(ctx fiber.Ctx) error
}

type GetHealthz200TextResponse string

func (response GetHealthz200TextResponse) VisitGetHealthzResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(ctx fiber.Ctx) error
}

type GetMetrics200JSONResponse map[string]interface{}

func (response GetMetrics200JSONResponse) VisitGetMetricsResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(ctx fiber.Ctx) error
}

type GetPing200TextResponse string

func (response GetPing200TextResponse) VisitGetPingResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(ctx fiber.Ctx) error
}

type GetProfile200JSONResponse Profile

func (response GetProfile200JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProfile401JSONResponse Err

func (response GetProfile401JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetProfile403JSONResponse Err

func (response GetProfile403JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetProfile404JSONResponse Err

func (response GetProfile404JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfileRequestObject struct {
	Body *PutProfileJSONRequestBody
}

type PutProfileResponseObject interface {
	VisitPutProfileResponse(ctx fiber.Ctx) error
}

type PutProfile200JSONResponse Profile

func (response PutProfile200JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutProfile400JSONResponse ValidationError

func (response PutProfile400JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutProfile401JSONResponse Err

func (response PutProfile401JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PutProfile403JSONResponse Err

func (response PutProfile403JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PutProfile404JSONResponse Err

func (response PutProfile404JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfile409JSONResponse Err

func (response PutProfile409JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PutProfilePasswordRequestObject struct {
	Body *PutProfilePasswordJSONRequestBody
}

type PutProfilePasswordResponseObject interface {
	VisitPutProfilePasswordResponse(ctx fiber.Ctx) error
}

type PutProfilePassword200Response struct {
}

func (response PutProfilePassword200Response) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PutProfilePassword400JSONResponse ValidationError

func (response PutProfilePassword400JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutProfilePassword401JSONResponse Err

func (response PutProfilePassword401JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PutProfilePassword403JSONResponse Err

func (response PutProfilePassword403JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PutProfilePassword404JSONResponse Err

func (response PutProfilePassword404JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Verify access token validity.
	// (GET /auth/check)
	GetAuthCheck(ctx context.Context, request GetAuthCheckRequestObject) (GetAuthCheckResponseObject, error)
	// Log in a user with their password.
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(ctx context.Context, request PostAuthLoginWithPasswordRequestObject) (PostAuthLoginWithPasswordResponseObject, error)
	// Log out a user.
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Refresh access and refresh tokens.
	// (POST /auth/refresh)
	PostAuthRefresh(ctx context.Context, request PostAuthRefreshRequestObject) (PostAuthRefreshResponseObject, error)
	// Register a new user with password authentication.
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(ctx context.Context, request PostAuthRegisterWithPasswordRequestObject) (PostAuthRegisterWithPasswordResponseObject, error)
	// Verify a user's email address.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(ctx context.Context, request PostAuthVerifyEmailRequestObject) (PostAuthVerifyEmailResponseObject, error)
	// Check the server's health status.
	// (GET /healthz)
	GetHealthz(ctx context.Context, request GetHealthzRequestObject) (GetHealthzResponseObject, error)
	// Retrieve OpenTelemetry metrics.
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// Check if the server is responsive.
	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)
	// Retrieve a user's profile.
	// (GET /profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Update a user's profile.
	// (PUT /profile)
	PutProfile(ctx context.Context, request PutProfileRequestObject) (PutProfileResponseObject, error)
	// Update a user's password.
	// (PUT /profile/password)
	PutProfilePassword(ctx context.Context, request PutProfilePasswordRequestObject) (PutProfilePasswordResponseObject, error)
}
type StrictHandlerFunc func(ctx fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAuthCheck operation middleware
func (sh *strictHandler) GetAuthCheck(ctx fiber.Ctx) error {
	var request GetAuthCheckRequestObject

	response, err := sh.ssi.GetAuthCheck(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetAuthCheckResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthLoginWithPassword operation middleware
func (sh *strictHandler) PostAuthLoginWithPassword(ctx fiber.Ctx, params PostAuthLoginWithPasswordParams) error {
	var request PostAuthLoginWithPasswordRequestObject

	request.Params = params

	var body PostAuthLoginWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthLoginWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthLoginWithPasswordResponse(ctx)
	}

	response, err := sh.ssi.PostAuthLoginWithPassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthLoginWithPasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx fiber.Ctx) error {
	var request PostAuthLogoutRequestObject

	var body PostAuthLogoutJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	response, err := sh.ssi.PostAuthLogout(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthLogoutResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthRefresh operation middleware
func (sh *strictHandler) PostAuthRefresh(ctx fiber.Ctx) error {
	var request PostAuthRefreshRequestObject

	var body PostAuthRefreshJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	response, err := sh.ssi.PostAuthRefresh(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthRefreshResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthRegisterWithPassword operation middleware
func (sh *strictHandler) PostAuthRegisterWithPassword(ctx fiber.Ctx, params PostAuthRegisterWithPasswordParams) error {
	var request PostAuthRegisterWithPasswordRequestObject

	request.Params = params

	var body PostAuthRegisterWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthRegisterWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthRegisterWithPasswordResponse(ctx)
	}

	response, err := sh.ssi.PostAuthRegisterWithPassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthRegisterWithPasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthVerifyEmail operation middleware
func (sh *strictHandler) PostAuthVerifyEmail(ctx fiber.Ctx, params PostAuthVerifyEmailParams) error {
	var request PostAuthVerifyEmailRequestObject

	request.Params = params

	response, err := sh.ssi.PostAuthVerifyEmail(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthVerifyEmailResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetHealthz operation middleware
func (sh *strictHandler) GetHealthz(ctx fiber.Ctx) error {
	var request GetHealthzRequestObject

	response, err := sh.ssi.GetHealthz(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetHealthzResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(ctx fiber.Ctx) error {
	var request GetMetricsRequestObject

	response, err := sh.ssi.GetMetrics(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetMetricsResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx fiber.Ctx) error {
	var request GetPingRequestObject

	response, err := sh.ssi.GetPing(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetPingResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx fiber.Ctx) error {
	var request GetProfileRequestObject

	response, err := sh.ssi.GetProfile(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetProfileResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PutProfile operation middleware
func (sh *strictHandler) PutProfile(ctx fiber.Ctx) error {
	var request PutProfileRequestObject

	var body PutProfileJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PutProfile400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPutProfileResponse(ctx)
	}

	response, err := sh.ssi.PutProfile(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPutProfileResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PutProfilePassword operation middleware
func (sh *strictHandler) PutProfilePassword(ctx fiber.Ctx) error {
	var request PutProfilePasswordRequestObject

	var body PutProfilePasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PutProfilePassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPutProfilePasswordResponse(ctx)
	}

	response, err := sh.ssi.PutProfilePassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPutProfilePasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"f+u36/8FAAD//7nRTpWvOAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
