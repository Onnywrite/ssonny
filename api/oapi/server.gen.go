// Package httpapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package httpapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	fmtvalidate "github.com/Onnywrite/ssonny/pkg/fmtvalidate"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
) // ServerInterface represents all server handlers.
type ServerInterface interface {
	// Verify access token validity.
	// (GET /auth/check)
	GetAuthCheck(c fiber.Ctx) error
	// Log in a user with their password.
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(c fiber.Ctx, params PostAuthLoginWithPasswordParams) error
	// Log out a user.
	// (POST /auth/logout)
	PostAuthLogout(c fiber.Ctx) error
	// Refresh access and refresh tokens.
	// (POST /auth/refresh)
	PostAuthRefresh(c fiber.Ctx) error
	// Register a new user with password authentication.
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(c fiber.Ctx, params PostAuthRegisterWithPasswordParams) error
	// Verify a user's email address.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(c fiber.Ctx, params PostAuthVerifyEmailParams) error
	// Check the server's health status.
	// (GET /healthz)
	GetHealthz(c fiber.Ctx) error
	// Retrieve OpenTelemetry metrics.
	// (GET /metrics)
	GetMetrics(c fiber.Ctx) error
	// Check if the server is responsive.
	// (GET /ping)
	GetPing(c fiber.Ctx) error
	// Retrieve a user's profile.
	// (GET /profile)
	GetProfile(c fiber.Ctx) error
	// Update a user's profile.
	// (PUT /profile)
	PutProfile(c fiber.Ctx) error
	// Update a user's password.
	// (PUT /profile/password)
	PutProfilePassword(c fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAuthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetAuthCheck(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{})

	return siw.Handler.GetAuthCheck(c)
}

// PostAuthLoginWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLoginWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLoginWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthLoginWithPassword(c, params)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c fiber.Ctx) error {

	return siw.Handler.PostAuthLogout(c)
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(c fiber.Ctx) error {

	return siw.Handler.PostAuthRefresh(c)
}

// PostAuthRegisterWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegisterWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRegisterWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthRegisterWithPassword(c, params)
}

// PostAuthVerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) PostAuthVerifyEmail(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthVerifyEmailParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "token" -------------

	if paramValue := c.Query("token"); paramValue != "" {

	} else {
		err = fmt.Errorf("query argument token is required, but not found")
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	err = runtime.BindQueryParameter("form", true, true, "token", query, &params.Token)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter token: %w", err).Error())
	}

	return siw.Handler.PostAuthVerifyEmail(c, params)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c fiber.Ctx) error {

	return siw.Handler.GetHealthz(c)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c fiber.Ctx) error {

	return siw.Handler.GetMetrics(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c fiber.Ctx) error {

	return siw.Handler.GetPing(c)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"get:profile", "profile"})

	return siw.Handler.GetProfile(c)
}

// PutProfile operation middleware
func (siw *ServerInterfaceWrapper) PutProfile(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"put:profile", "profile"})

	return siw.Handler.PutProfile(c)
}

// PutProfilePassword operation middleware
func (siw *ServerInterfaceWrapper) PutProfilePassword(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"put:profile/password"})

	return siw.Handler.PutProfilePassword(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	Middlewares         []fiber.Handler
	EndpointMiddlewares map[string][]fiber.Handler
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// created by github.com/Onnywrite
// Constants for all endpoints
const (
	// GET /auth/check: Verify access token validity.
	EP_GetAuthCheck = "/auth/check"
	// POST /auth/loginWithPassword: Log in a user with their password.
	EP_PostAuthLoginWithPassword = "/auth/loginWithPassword"
	// POST /auth/logout: Log out a user.
	EP_PostAuthLogout = "/auth/logout"
	// POST /auth/refresh: Refresh access and refresh tokens.
	EP_PostAuthRefresh = "/auth/refresh"
	// POST /auth/registerWithPassword: Register a new user with password authentication.
	EP_PostAuthRegisterWithPassword = "/auth/registerWithPassword"
	// POST /auth/verify/email: Verify a user's email address.
	EP_PostAuthVerifyEmail = "/auth/verify/email"
	// GET /healthz: Check the server's health status.
	EP_GetHealthz = "/healthz"
	// GET /metrics: Retrieve OpenTelemetry metrics.
	EP_GetMetrics = "/metrics"
	// GET /ping: Check if the server is responsive.
	EP_GetPing = "/ping"
	// GET /profile: Retrieve a user's profile.
	EP_GetProfile = "/profile"
	// PUT /profile: Update a user's profile.
	EP_PutProfile = "/profile"
	// PUT /profile/password: Update a user's password.
	EP_PutProfilePassword = "/profile/password"
)

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	mws := func(ep string) []fiber.Handler {
		return options.EndpointMiddlewares[ep]
	}

	router.Get(EP_GetAuthCheck, wrapper.GetAuthCheck, mws(EP_GetAuthCheck)...)
	router.Post(EP_PostAuthLoginWithPassword, wrapper.PostAuthLoginWithPassword, mws(EP_PostAuthLoginWithPassword)...)
	router.Post(EP_PostAuthLogout, wrapper.PostAuthLogout, mws(EP_PostAuthLogout)...)
	router.Post(EP_PostAuthRefresh, wrapper.PostAuthRefresh, mws(EP_PostAuthRefresh)...)
	router.Post(EP_PostAuthRegisterWithPassword, wrapper.PostAuthRegisterWithPassword, mws(EP_PostAuthRegisterWithPassword)...)
	router.Post(EP_PostAuthVerifyEmail, wrapper.PostAuthVerifyEmail, mws(EP_PostAuthVerifyEmail)...)
	router.Get(EP_GetHealthz, wrapper.GetHealthz, mws(EP_GetHealthz)...)
	router.Get(EP_GetMetrics, wrapper.GetMetrics, mws(EP_GetMetrics)...)
	router.Get(EP_GetPing, wrapper.GetPing, mws(EP_GetPing)...)
	router.Get(EP_GetProfile, wrapper.GetProfile, mws(EP_GetProfile)...)
	router.Put(EP_PutProfile, wrapper.PutProfile, mws(EP_PutProfile)...)
	router.Put(EP_PutProfilePassword, wrapper.PutProfilePassword, mws(EP_PutProfilePassword)...)

}

type GetAuthCheckRequestObject struct {
}

type GetAuthCheckResponseObject interface {
	VisitGetAuthCheckResponse(ctx fiber.Ctx) error
}

type GetAuthCheck200Response struct {
}

func (response GetAuthCheck200Response) VisitGetAuthCheckResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetAuthCheck401JSONResponse Err

func (response GetAuthCheck401JSONResponse) VisitGetAuthCheckResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPasswordRequestObject struct {
	Params PostAuthLoginWithPasswordParams
	Body   *PostAuthLoginWithPasswordJSONRequestBody
}

type PostAuthLoginWithPasswordResponseObject interface {
	VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthLoginWithPassword200JSONResponse AuthenticatedUser

func (response PostAuthLoginWithPassword200JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword400JSONResponse ValidationError

func (response PostAuthLoginWithPassword400JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword404JSONResponse Err

func (response PostAuthLoginWithPassword404JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostAuthLogoutRequestObject struct {
	Body *PostAuthLogoutJSONRequestBody
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(ctx fiber.Ctx) error
}

type PostAuthLogout200Response struct {
}

func (response PostAuthLogout200Response) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthLogout401JSONResponse Err

func (response PostAuthLogout401JSONResponse) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRefreshRequestObject struct {
	Body *PostAuthRefreshJSONRequestBody
}

type PostAuthRefreshResponseObject interface {
	VisitPostAuthRefreshResponse(ctx fiber.Ctx) error
}

type PostAuthRefresh200JSONResponse Tokens

func (response PostAuthRefresh200JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthRefresh401JSONResponse Err

func (response PostAuthRefresh401JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPasswordRequestObject struct {
	Params PostAuthRegisterWithPasswordParams
	Body   *PostAuthRegisterWithPasswordJSONRequestBody
}

type PostAuthRegisterWithPasswordResponseObject interface {
	VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthRegisterWithPassword201JSONResponse AuthenticatedUser

func (response PostAuthRegisterWithPassword201JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword400JSONResponse ValidationError

func (response PostAuthRegisterWithPassword400JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword409JSONResponse Err

func (response PostAuthRegisterWithPassword409JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PostAuthVerifyEmailRequestObject struct {
	Params PostAuthVerifyEmailParams
}

type PostAuthVerifyEmailResponseObject interface {
	VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error
}

type PostAuthVerifyEmail200Response struct {
}

func (response PostAuthVerifyEmail200Response) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthVerifyEmail400JSONResponse ValidationError

func (response PostAuthVerifyEmail400JSONResponse) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetHealthzRequestObject struct {
}

type GetHealthzResponseObject interface {
	VisitGetHealthzResponse(ctx fiber.Ctx) error
}

type GetHealthz200TextResponse string

func (response GetHealthz200TextResponse) VisitGetHealthzResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(ctx fiber.Ctx) error
}

type GetMetrics200JSONResponse map[string]interface{}

func (response GetMetrics200JSONResponse) VisitGetMetricsResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(ctx fiber.Ctx) error
}

type GetPing200TextResponse string

func (response GetPing200TextResponse) VisitGetPingResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(ctx fiber.Ctx) error
}

type GetProfile200JSONResponse Profile

func (response GetProfile200JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProfile401JSONResponse Err

func (response GetProfile401JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetProfile403JSONResponse Err

func (response GetProfile403JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetProfile404JSONResponse Err

func (response GetProfile404JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfileRequestObject struct {
	Body *PutProfileJSONRequestBody
}

type PutProfileResponseObject interface {
	VisitPutProfileResponse(ctx fiber.Ctx) error
}

type PutProfile200JSONResponse Profile

func (response PutProfile200JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutProfile400JSONResponse ValidationError

func (response PutProfile400JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutProfile401JSONResponse Err

func (response PutProfile401JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PutProfile404JSONResponse Err

func (response PutProfile404JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfilePasswordRequestObject struct {
	Body *PutProfilePasswordJSONRequestBody
}

type PutProfilePasswordResponseObject interface {
	VisitPutProfilePasswordResponse(ctx fiber.Ctx) error
}

type PutProfilePassword200Response struct {
}

func (response PutProfilePassword200Response) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PutProfilePassword400JSONResponse ValidationError

func (response PutProfilePassword400JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutProfilePassword401JSONResponse Err

func (response PutProfilePassword401JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Verify access token validity.
	// (GET /auth/check)
	GetAuthCheck(ctx context.Context, request GetAuthCheckRequestObject) (GetAuthCheckResponseObject, error)
	// Log in a user with their password.
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(ctx context.Context, request PostAuthLoginWithPasswordRequestObject) (PostAuthLoginWithPasswordResponseObject, error)
	// Log out a user.
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Refresh access and refresh tokens.
	// (POST /auth/refresh)
	PostAuthRefresh(ctx context.Context, request PostAuthRefreshRequestObject) (PostAuthRefreshResponseObject, error)
	// Register a new user with password authentication.
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(ctx context.Context, request PostAuthRegisterWithPasswordRequestObject) (PostAuthRegisterWithPasswordResponseObject, error)
	// Verify a user's email address.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(ctx context.Context, request PostAuthVerifyEmailRequestObject) (PostAuthVerifyEmailResponseObject, error)
	// Check the server's health status.
	// (GET /healthz)
	GetHealthz(ctx context.Context, request GetHealthzRequestObject) (GetHealthzResponseObject, error)
	// Retrieve OpenTelemetry metrics.
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// Check if the server is responsive.
	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)
	// Retrieve a user's profile.
	// (GET /profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Update a user's profile.
	// (PUT /profile)
	PutProfile(ctx context.Context, request PutProfileRequestObject) (PutProfileResponseObject, error)
	// Update a user's password.
	// (PUT /profile/password)
	PutProfilePassword(ctx context.Context, request PutProfilePasswordRequestObject) (PutProfilePasswordResponseObject, error)
}
type StrictHandlerFunc func(ctx fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAuthCheck operation middleware
func (sh *strictHandler) GetAuthCheck(ctx fiber.Ctx) error {
	var request GetAuthCheckRequestObject

	response, err := sh.ssi.GetAuthCheck(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetAuthCheckResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthLoginWithPassword operation middleware
func (sh *strictHandler) PostAuthLoginWithPassword(ctx fiber.Ctx, params PostAuthLoginWithPasswordParams) error {
	var request PostAuthLoginWithPasswordRequestObject

	request.Params = params

	var body PostAuthLoginWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthLoginWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthLoginWithPasswordResponse(ctx)
	}

	response, err := sh.ssi.PostAuthLoginWithPassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthLoginWithPasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx fiber.Ctx) error {
	var request PostAuthLogoutRequestObject

	var body PostAuthLogoutJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	response, err := sh.ssi.PostAuthLogout(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthLogoutResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthRefresh operation middleware
func (sh *strictHandler) PostAuthRefresh(ctx fiber.Ctx) error {
	var request PostAuthRefreshRequestObject

	var body PostAuthRefreshJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	response, err := sh.ssi.PostAuthRefresh(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthRefreshResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthRegisterWithPassword operation middleware
func (sh *strictHandler) PostAuthRegisterWithPassword(ctx fiber.Ctx, params PostAuthRegisterWithPasswordParams) error {
	var request PostAuthRegisterWithPasswordRequestObject

	request.Params = params

	var body PostAuthRegisterWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthRegisterWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthRegisterWithPasswordResponse(ctx)
	}

	response, err := sh.ssi.PostAuthRegisterWithPassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthRegisterWithPasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthVerifyEmail operation middleware
func (sh *strictHandler) PostAuthVerifyEmail(ctx fiber.Ctx, params PostAuthVerifyEmailParams) error {
	var request PostAuthVerifyEmailRequestObject

	request.Params = params

	response, err := sh.ssi.PostAuthVerifyEmail(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthVerifyEmailResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetHealthz operation middleware
func (sh *strictHandler) GetHealthz(ctx fiber.Ctx) error {
	var request GetHealthzRequestObject

	response, err := sh.ssi.GetHealthz(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetHealthzResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(ctx fiber.Ctx) error {
	var request GetMetricsRequestObject

	response, err := sh.ssi.GetMetrics(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetMetricsResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx fiber.Ctx) error {
	var request GetPingRequestObject

	response, err := sh.ssi.GetPing(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetPingResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx fiber.Ctx) error {
	var request GetProfileRequestObject

	response, err := sh.ssi.GetProfile(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetProfileResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PutProfile operation middleware
func (sh *strictHandler) PutProfile(ctx fiber.Ctx) error {
	var request PutProfileRequestObject

	var body PutProfileJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PutProfile400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPutProfileResponse(ctx)
	}

	response, err := sh.ssi.PutProfile(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPutProfileResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PutProfilePassword operation middleware
func (sh *strictHandler) PutProfilePassword(ctx fiber.Ctx) error {
	var request PutProfilePasswordRequestObject

	var body PutProfilePasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PutProfilePassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPutProfilePasswordResponse(ctx)
	}

	response, err := sh.ssi.PutProfilePassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPutProfilePasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"6/8FAAD//7s6At3qNQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
