// Package httpapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package httpapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	fmtvalidate "github.com/Onnywrite/ssonny/pkg/fmtvalidate"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
) // ServerInterface represents all server handlers.
type ServerInterface interface {
	// Verify access token validity.
	// (GET /auth/check)
	GetAuthCheck(c fiber.Ctx) error
	// Log in a user with their password.
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(c fiber.Ctx, params PostAuthLoginWithPasswordParams) error
	// Log out a user.
	// (POST /auth/logout)
	PostAuthLogout(c fiber.Ctx) error
	// Refresh access and refresh tokens.
	// (POST /auth/refresh)
	PostAuthRefresh(c fiber.Ctx) error
	// Register a new user with password authentication.
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(c fiber.Ctx, params PostAuthRegisterWithPasswordParams) error
	// Verify a user's email address.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(c fiber.Ctx) error
	// Check the server's health status.
	// (GET /healthz)
	GetHealthz(c fiber.Ctx) error
	// Retrieve OpenTelemetry metrics.
	// (GET /metrics)
	GetMetrics(c fiber.Ctx) error
	// Check if the server is responsive.
	// (GET /ping)
	GetPing(c fiber.Ctx) error
	// Retrieve a user's profile.
	// (GET /profile)
	GetProfile(c fiber.Ctx) error
	// Update a user's profile.
	// (PUT /profile)
	PutProfile(c fiber.Ctx) error
	// Update a user's password.
	// (PUT /profile/password)
	PutProfilePassword(c fiber.Ctx, params PutProfilePasswordParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAuthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetAuthCheck(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{})

	return siw.Handler.GetAuthCheck(c)
}

// PostAuthLoginWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLoginWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLoginWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthLoginWithPassword(c, params)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c fiber.Ctx) error {

	return siw.Handler.PostAuthLogout(c)
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(c fiber.Ctx) error {

	return siw.Handler.PostAuthRefresh(c)
}

// PostAuthRegisterWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegisterWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRegisterWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthRegisterWithPassword(c, params)
}

// PostAuthVerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) PostAuthVerifyEmail(c fiber.Ctx) error {

	return siw.Handler.PostAuthVerifyEmail(c)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c fiber.Ctx) error {

	return siw.Handler.GetHealthz(c)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c fiber.Ctx) error {

	return siw.Handler.GetMetrics(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c fiber.Ctx) error {

	return siw.Handler.GetPing(c)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"get:profile", "profile"})

	return siw.Handler.GetProfile(c)
}

// PutProfile operation middleware
func (siw *ServerInterfaceWrapper) PutProfile(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"put:profile", "profile"})

	return siw.Handler.PutProfile(c)
}

// PutProfilePassword operation middleware
func (siw *ServerInterfaceWrapper) PutProfilePassword(c fiber.Ctx) error {

	var err error

	c.Locals(BearerAuthScopes, []string{"put:profile/password"})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutProfilePasswordParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "skip_limiter" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip_limiter", query, &params.SkipLimiter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter skip_limiter: %w", err).Error())
	}

	headers := c.GetReqHeaders()

	// ------------- Optional header parameter "X-Skip-Limiter" -------------
	if values, found := headers[http.CanonicalHeaderKey("X-Skip-Limiter")]; found {
		var XSkipLimiter SkipLimiterHeader

		err = runtime.BindStyledParameterWithOptions("simple", "X-Skip-Limiter", values[0], &XSkipLimiter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter X-Skip-Limiter: %w", err).Error())
		}

		params.XSkipLimiter = &XSkipLimiter

	}

	return siw.Handler.PutProfilePassword(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	Middlewares         []fiber.Handler
	EndpointMiddlewares map[string][]fiber.Handler
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// created by github.com/Onnywrite
// Constants for all endpoints
const (
	// GET /auth/check: Verify access token validity.
	EP_GetAuthCheck = "GET /auth/check"
	// POST /auth/loginWithPassword: Log in a user with their password.
	EP_PostAuthLoginWithPassword = "POST /auth/loginWithPassword"
	// POST /auth/logout: Log out a user.
	EP_PostAuthLogout = "POST /auth/logout"
	// POST /auth/refresh: Refresh access and refresh tokens.
	EP_PostAuthRefresh = "POST /auth/refresh"
	// POST /auth/registerWithPassword: Register a new user with password authentication.
	EP_PostAuthRegisterWithPassword = "POST /auth/registerWithPassword"
	// POST /auth/verify/email: Verify a user's email address.
	EP_PostAuthVerifyEmail = "POST /auth/verify/email"
	// GET /healthz: Check the server's health status.
	EP_GetHealthz = "GET /healthz"
	// GET /metrics: Retrieve OpenTelemetry metrics.
	EP_GetMetrics = "GET /metrics"
	// GET /ping: Check if the server is responsive.
	EP_GetPing = "GET /ping"
	// GET /profile: Retrieve a user's profile.
	EP_GetProfile = "GET /profile"
	// PUT /profile: Update a user's profile.
	EP_PutProfile = "PUT /profile"
	// PUT /profile/password: Update a user's password.
	EP_PutProfilePassword = "PUT /profile/password"
)

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	mws := func(ep string) []fiber.Handler {
		return options.EndpointMiddlewares[ep]
	}

	router.Get("/auth/check", wrapper.GetAuthCheck, mws(EP_GetAuthCheck)...)
	router.Post("/auth/loginWithPassword", wrapper.PostAuthLoginWithPassword, mws(EP_PostAuthLoginWithPassword)...)
	router.Post("/auth/logout", wrapper.PostAuthLogout, mws(EP_PostAuthLogout)...)
	router.Post("/auth/refresh", wrapper.PostAuthRefresh, mws(EP_PostAuthRefresh)...)
	router.Post("/auth/registerWithPassword", wrapper.PostAuthRegisterWithPassword, mws(EP_PostAuthRegisterWithPassword)...)
	router.Post("/auth/verify/email", wrapper.PostAuthVerifyEmail, mws(EP_PostAuthVerifyEmail)...)
	router.Get("/healthz", wrapper.GetHealthz, mws(EP_GetHealthz)...)
	router.Get("/metrics", wrapper.GetMetrics, mws(EP_GetMetrics)...)
	router.Get("/ping", wrapper.GetPing, mws(EP_GetPing)...)
	router.Get("/profile", wrapper.GetProfile, mws(EP_GetProfile)...)
	router.Put("/profile", wrapper.PutProfile, mws(EP_PutProfile)...)
	router.Put("/profile/password", wrapper.PutProfilePassword, mws(EP_PutProfilePassword)...)

}

type GetAuthCheckRequestObject struct {
}

type GetAuthCheckResponseObject interface {
	VisitGetAuthCheckResponse(ctx fiber.Ctx) error
}

type GetAuthCheck200Response struct {
}

func (response GetAuthCheck200Response) VisitGetAuthCheckResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetAuthCheck401JSONResponse Err

func (response GetAuthCheck401JSONResponse) VisitGetAuthCheckResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPasswordRequestObject struct {
	Params PostAuthLoginWithPasswordParams
	Body   *PostAuthLoginWithPasswordJSONRequestBody
}

type PostAuthLoginWithPasswordResponseObject interface {
	VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthLoginWithPassword200JSONResponse AuthenticatedUser

func (response PostAuthLoginWithPassword200JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword400JSONResponse ValidationError

func (response PostAuthLoginWithPassword400JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword404JSONResponse Err

func (response PostAuthLoginWithPassword404JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostAuthLogoutRequestObject struct {
	Body *PostAuthLogoutJSONRequestBody
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(ctx fiber.Ctx) error
}

type PostAuthLogout200Response struct {
}

func (response PostAuthLogout200Response) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthLogout401JSONResponse Err

func (response PostAuthLogout401JSONResponse) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRefreshRequestObject struct {
	Body *PostAuthRefreshJSONRequestBody
}

type PostAuthRefreshResponseObject interface {
	VisitPostAuthRefreshResponse(ctx fiber.Ctx) error
}

type PostAuthRefresh200JSONResponse Tokens

func (response PostAuthRefresh200JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthRefresh401JSONResponse Err

func (response PostAuthRefresh401JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPasswordRequestObject struct {
	Params PostAuthRegisterWithPasswordParams
	Body   *PostAuthRegisterWithPasswordJSONRequestBody
}

type PostAuthRegisterWithPasswordResponseObject interface {
	VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthRegisterWithPassword201JSONResponse AuthenticatedUser

func (response PostAuthRegisterWithPassword201JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword400JSONResponse ValidationError

func (response PostAuthRegisterWithPassword400JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword409JSONResponse Err

func (response PostAuthRegisterWithPassword409JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PostAuthVerifyEmailRequestObject struct {
	Body *PostAuthVerifyEmailJSONRequestBody
}

type PostAuthVerifyEmailResponseObject interface {
	VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error
}

type PostAuthVerifyEmail200Response struct {
}

func (response PostAuthVerifyEmail200Response) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthVerifyEmail400JSONResponse ValidationError

func (response PostAuthVerifyEmail400JSONResponse) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetHealthzRequestObject struct {
}

type GetHealthzResponseObject interface {
	VisitGetHealthzResponse(ctx fiber.Ctx) error
}

type GetHealthz200TextResponse string

func (response GetHealthz200TextResponse) VisitGetHealthzResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(ctx fiber.Ctx) error
}

type GetMetrics200JSONResponse map[string]interface{}

func (response GetMetrics200JSONResponse) VisitGetMetricsResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(ctx fiber.Ctx) error
}

type GetPing200TextResponse string

func (response GetPing200TextResponse) VisitGetPingResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(ctx fiber.Ctx) error
}

type GetProfile200JSONResponse Profile

func (response GetProfile200JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProfile401JSONResponse Err

func (response GetProfile401JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetProfile403JSONResponse Err

func (response GetProfile403JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetProfile404JSONResponse Err

func (response GetProfile404JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfileRequestObject struct {
	Body *PutProfileJSONRequestBody
}

type PutProfileResponseObject interface {
	VisitPutProfileResponse(ctx fiber.Ctx) error
}

type PutProfile200JSONResponse Profile

func (response PutProfile200JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutProfile400JSONResponse ValidationError

func (response PutProfile400JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutProfile401JSONResponse Err

func (response PutProfile401JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PutProfile403JSONResponse Err

func (response PutProfile403JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PutProfile404JSONResponse Err

func (response PutProfile404JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfile409JSONResponse Err

func (response PutProfile409JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PutProfilePasswordRequestObject struct {
	Params PutProfilePasswordParams
	Body   *PutProfilePasswordJSONRequestBody
}

type PutProfilePasswordResponseObject interface {
	VisitPutProfilePasswordResponse(ctx fiber.Ctx) error
}

type PutProfilePassword200Response struct {
}

func (response PutProfilePassword200Response) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PutProfilePassword400JSONResponse ValidationError

func (response PutProfilePassword400JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutProfilePassword401JSONResponse Err

func (response PutProfilePassword401JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PutProfilePassword403JSONResponse Err

func (response PutProfilePassword403JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PutProfilePassword404JSONResponse Err

func (response PutProfilePassword404JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfilePassword429ResponseHeaders struct {
	RetryAfter int32
}

type PutProfilePassword429JSONResponse struct {
	Body    Err
	Headers PutProfilePassword429ResponseHeaders
}

func (response PutProfilePassword429JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Verify access token validity.
	// (GET /auth/check)
	GetAuthCheck(ctx context.Context, request GetAuthCheckRequestObject) (GetAuthCheckResponseObject, error)
	// Log in a user with their password.
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(ctx context.Context, request PostAuthLoginWithPasswordRequestObject) (PostAuthLoginWithPasswordResponseObject, error)
	// Log out a user.
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Refresh access and refresh tokens.
	// (POST /auth/refresh)
	PostAuthRefresh(ctx context.Context, request PostAuthRefreshRequestObject) (PostAuthRefreshResponseObject, error)
	// Register a new user with password authentication.
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(ctx context.Context, request PostAuthRegisterWithPasswordRequestObject) (PostAuthRegisterWithPasswordResponseObject, error)
	// Verify a user's email address.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(ctx context.Context, request PostAuthVerifyEmailRequestObject) (PostAuthVerifyEmailResponseObject, error)
	// Check the server's health status.
	// (GET /healthz)
	GetHealthz(ctx context.Context, request GetHealthzRequestObject) (GetHealthzResponseObject, error)
	// Retrieve OpenTelemetry metrics.
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// Check if the server is responsive.
	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)
	// Retrieve a user's profile.
	// (GET /profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Update a user's profile.
	// (PUT /profile)
	PutProfile(ctx context.Context, request PutProfileRequestObject) (PutProfileResponseObject, error)
	// Update a user's password.
	// (PUT /profile/password)
	PutProfilePassword(ctx context.Context, request PutProfilePasswordRequestObject) (PutProfilePasswordResponseObject, error)
}
type StrictHandlerFunc func(ctx fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAuthCheck operation middleware
func (sh *strictHandler) GetAuthCheck(ctx fiber.Ctx) error {
	var request GetAuthCheckRequestObject

	response, err := sh.ssi.GetAuthCheck(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetAuthCheckResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthLoginWithPassword operation middleware
func (sh *strictHandler) PostAuthLoginWithPassword(ctx fiber.Ctx, params PostAuthLoginWithPasswordParams) error {
	var request PostAuthLoginWithPasswordRequestObject

	request.Params = params

	var body PostAuthLoginWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthLoginWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthLoginWithPasswordResponse(ctx)
	}

	response, err := sh.ssi.PostAuthLoginWithPassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthLoginWithPasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx fiber.Ctx) error {
	var request PostAuthLogoutRequestObject

	var body PostAuthLogoutJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	response, err := sh.ssi.PostAuthLogout(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthLogoutResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthRefresh operation middleware
func (sh *strictHandler) PostAuthRefresh(ctx fiber.Ctx) error {
	var request PostAuthRefreshRequestObject

	var body PostAuthRefreshJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	response, err := sh.ssi.PostAuthRefresh(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthRefreshResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthRegisterWithPassword operation middleware
func (sh *strictHandler) PostAuthRegisterWithPassword(ctx fiber.Ctx, params PostAuthRegisterWithPasswordParams) error {
	var request PostAuthRegisterWithPasswordRequestObject

	request.Params = params

	var body PostAuthRegisterWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthRegisterWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthRegisterWithPasswordResponse(ctx)
	}

	response, err := sh.ssi.PostAuthRegisterWithPassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthRegisterWithPasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthVerifyEmail operation middleware
func (sh *strictHandler) PostAuthVerifyEmail(ctx fiber.Ctx) error {
	var request PostAuthVerifyEmailRequestObject

	var body PostAuthVerifyEmailJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthVerifyEmail400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthVerifyEmailResponse(ctx)
	}

	response, err := sh.ssi.PostAuthVerifyEmail(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthVerifyEmailResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetHealthz operation middleware
func (sh *strictHandler) GetHealthz(ctx fiber.Ctx) error {
	var request GetHealthzRequestObject

	response, err := sh.ssi.GetHealthz(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetHealthzResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(ctx fiber.Ctx) error {
	var request GetMetricsRequestObject

	response, err := sh.ssi.GetMetrics(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetMetricsResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx fiber.Ctx) error {
	var request GetPingRequestObject

	response, err := sh.ssi.GetPing(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetPingResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx fiber.Ctx) error {
	var request GetProfileRequestObject

	response, err := sh.ssi.GetProfile(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetProfileResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PutProfile operation middleware
func (sh *strictHandler) PutProfile(ctx fiber.Ctx) error {
	var request PutProfileRequestObject

	var body PutProfileJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PutProfile400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPutProfileResponse(ctx)
	}

	response, err := sh.ssi.PutProfile(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPutProfileResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PutProfilePassword operation middleware
func (sh *strictHandler) PutProfilePassword(ctx fiber.Ctx, params PutProfilePasswordParams) error {
	var request PutProfilePasswordRequestObject

	request.Params = params

	var body PutProfilePasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PutProfilePassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPutProfilePasswordResponse(ctx)
	}

	response, err := sh.ssi.PutProfilePassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPutProfilePasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
