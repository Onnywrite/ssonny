// Package httpapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package httpapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	fmtvalidate "github.com/Onnywrite/ssonny/pkg/fmtvalidate"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
) // ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user by their password and email or nickname
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(c fiber.Ctx, params PostAuthLoginWithPasswordParams) error
	// Login user by their password and email or nickname
	// (POST /auth/logout)
	PostAuthLogout(c fiber.Ctx) error
	// Refreshes expired access and unexpired refresh tokens
	// (POST /auth/refresh)
	PostAuthRefresh(c fiber.Ctx) error
	// Registrates user by a password and email or nickname
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(c fiber.Ctx, params PostAuthRegisterWithPasswordParams) error
	// Verifies the user's email.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(c fiber.Ctx, params PostAuthVerifyEmailParams) error
	// The server's health probes
	// (GET /healthz)
	GetHealthz(c fiber.Ctx) error
	// OpenTelemetry metrics
	// (GET /metrics)
	GetMetrics(c fiber.Ctx) error
	// Pings the server
	// (GET /ping)
	GetPing(c fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostAuthLoginWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLoginWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLoginWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Optional header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = &UserAgent

	}

	return siw.Handler.PostAuthLoginWithPassword(c, params)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c fiber.Ctx) error {

	return siw.Handler.PostAuthLogout(c)
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(c fiber.Ctx) error {

	return siw.Handler.PostAuthRefresh(c)
}

// PostAuthRegisterWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegisterWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRegisterWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Optional header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = &UserAgent

	}

	return siw.Handler.PostAuthRegisterWithPassword(c, params)
}

// PostAuthVerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) PostAuthVerifyEmail(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthVerifyEmailParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "token" -------------

	if paramValue := c.Query("token"); paramValue != "" {

	} else {
		err = fmt.Errorf("query argument token is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "token", query, &params.Token)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter token: %w", err).Error())
	}

	return siw.Handler.PostAuthVerifyEmail(c, params)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c fiber.Ctx) error {

	return siw.Handler.GetHealthz(c)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c fiber.Ctx) error {

	return siw.Handler.GetMetrics(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c fiber.Ctx) error {

	return siw.Handler.GetPing(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/auth/loginWithPassword", wrapper.PostAuthLoginWithPassword)

	router.Post(options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)

	router.Post(options.BaseURL+"/auth/refresh", wrapper.PostAuthRefresh)

	router.Post(options.BaseURL+"/auth/registerWithPassword", wrapper.PostAuthRegisterWithPassword)

	router.Post(options.BaseURL+"/auth/verify/email", wrapper.PostAuthVerifyEmail)

	router.Get(options.BaseURL+"/healthz", wrapper.GetHealthz)

	router.Get(options.BaseURL+"/metrics", wrapper.GetMetrics)

	router.Get(options.BaseURL+"/ping", wrapper.GetPing)

}

type PostAuthLoginWithPasswordRequestObject struct {
	Params PostAuthLoginWithPasswordParams
	Body   *PostAuthLoginWithPasswordJSONRequestBody
}

type PostAuthLoginWithPasswordResponseObject interface {
	VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthLoginWithPassword200JSONResponse AuthenticatedUser

func (response PostAuthLoginWithPassword200JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword400JSONResponse ValidationError

func (response PostAuthLoginWithPassword400JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword404JSONResponse Err

func (response PostAuthLoginWithPassword404JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostAuthLogoutRequestObject struct {
	Body *PostAuthLogoutJSONRequestBody
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(ctx fiber.Ctx) error
}

type PostAuthLogout200Response struct {
}

func (response PostAuthLogout200Response) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthLogout401Response struct {
}

func (response PostAuthLogout401Response) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Status(401)
	return nil
}

type PostAuthRefreshRequestObject struct {
	Body *PostAuthRefreshJSONRequestBody
}

type PostAuthRefreshResponseObject interface {
	VisitPostAuthRefreshResponse(ctx fiber.Ctx) error
}

type PostAuthRefresh200JSONResponse Tokens

func (response PostAuthRefresh200JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthRefresh401JSONResponse Err

func (response PostAuthRefresh401JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPasswordRequestObject struct {
	Params PostAuthRegisterWithPasswordParams
	Body   *PostAuthRegisterWithPasswordJSONRequestBody
}

type PostAuthRegisterWithPasswordResponseObject interface {
	VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthRegisterWithPassword201JSONResponse AuthenticatedUser

func (response PostAuthRegisterWithPassword201JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword400JSONResponse ValidationError

func (response PostAuthRegisterWithPassword400JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword409JSONResponse Err

func (response PostAuthRegisterWithPassword409JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PostAuthVerifyEmailRequestObject struct {
	Params PostAuthVerifyEmailParams
}

type PostAuthVerifyEmailResponseObject interface {
	VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error
}

type PostAuthVerifyEmail200Response struct {
}

func (response PostAuthVerifyEmail200Response) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthVerifyEmail400JSONResponse ValidationError

func (response PostAuthVerifyEmail400JSONResponse) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetHealthzRequestObject struct {
}

type GetHealthzResponseObject interface {
	VisitGetHealthzResponse(ctx fiber.Ctx) error
}

type GetHealthz200TextResponse string

func (response GetHealthz200TextResponse) VisitGetHealthzResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(ctx fiber.Ctx) error
}

type GetMetrics200JSONResponse map[string]interface{}

func (response GetMetrics200JSONResponse) VisitGetMetricsResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(ctx fiber.Ctx) error
}

type GetPing200TextResponse string

func (response GetPing200TextResponse) VisitGetPingResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Login user by their password and email or nickname
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(ctx context.Context, request PostAuthLoginWithPasswordRequestObject) (PostAuthLoginWithPasswordResponseObject, error)
	// Login user by their password and email or nickname
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Refreshes expired access and unexpired refresh tokens
	// (POST /auth/refresh)
	PostAuthRefresh(ctx context.Context, request PostAuthRefreshRequestObject) (PostAuthRefreshResponseObject, error)
	// Registrates user by a password and email or nickname
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(ctx context.Context, request PostAuthRegisterWithPasswordRequestObject) (PostAuthRegisterWithPasswordResponseObject, error)
	// Verifies the user's email.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(ctx context.Context, request PostAuthVerifyEmailRequestObject) (PostAuthVerifyEmailResponseObject, error)
	// The server's health probes
	// (GET /healthz)
	GetHealthz(ctx context.Context, request GetHealthzRequestObject) (GetHealthzResponseObject, error)
	// OpenTelemetry metrics
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// Pings the server
	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)
}
type StrictHandlerFunc func(ctx fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuthLoginWithPassword operation middleware
func (sh *strictHandler) PostAuthLoginWithPassword(ctx fiber.Ctx, params PostAuthLoginWithPasswordParams) error {
	var request PostAuthLoginWithPasswordRequestObject

	request.Params = params

	var body PostAuthLoginWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthLoginWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthLoginWithPasswordResponse(ctx)
	}

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLoginWithPassword(ctx.UserContext(), request.(PostAuthLoginWithPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLoginWithPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthLoginWithPasswordResponseObject); ok {
		if err := validResponse.VisitPostAuthLoginWithPasswordResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx fiber.Ctx) error {
	var request PostAuthLogoutRequestObject

	var body PostAuthLogoutJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogout(ctx.UserContext(), request.(PostAuthLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthLogoutResponseObject); ok {
		if err := validResponse.VisitPostAuthLogoutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRefresh operation middleware
func (sh *strictHandler) PostAuthRefresh(ctx fiber.Ctx) error {
	var request PostAuthRefreshRequestObject

	var body PostAuthRefreshJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefresh(ctx.UserContext(), request.(PostAuthRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefresh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthRefreshResponseObject); ok {
		if err := validResponse.VisitPostAuthRefreshResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRegisterWithPassword operation middleware
func (sh *strictHandler) PostAuthRegisterWithPassword(ctx fiber.Ctx, params PostAuthRegisterWithPasswordParams) error {
	var request PostAuthRegisterWithPasswordRequestObject

	request.Params = params

	var body PostAuthRegisterWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthRegisterWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthRegisterWithPasswordResponse(ctx)
	}

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRegisterWithPassword(ctx.UserContext(), request.(PostAuthRegisterWithPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRegisterWithPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthRegisterWithPasswordResponseObject); ok {
		if err := validResponse.VisitPostAuthRegisterWithPasswordResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthVerifyEmail operation middleware
func (sh *strictHandler) PostAuthVerifyEmail(ctx fiber.Ctx, params PostAuthVerifyEmailParams) error {
	var request PostAuthVerifyEmailRequestObject

	request.Params = params

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthVerifyEmail(ctx.UserContext(), request.(PostAuthVerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthVerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostAuthVerifyEmailResponseObject); ok {
		if err := validResponse.VisitPostAuthVerifyEmailResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetHealthz operation middleware
func (sh *strictHandler) GetHealthz(ctx fiber.Ctx) error {
	var request GetHealthzRequestObject

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthz(ctx.UserContext(), request.(GetHealthzRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthz")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetHealthzResponseObject); ok {
		if err := validResponse.VisitGetHealthzResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(ctx fiber.Ctx) error {
	var request GetMetricsRequestObject

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMetrics(ctx.UserContext(), request.(GetMetricsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMetrics")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetMetricsResponseObject); ok {
		if err := validResponse.VisitGetMetricsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx fiber.Ctx) error {
	var request GetPingRequestObject

	handler := func(ctx fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetPing(ctx.UserContext(), request.(GetPingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPing")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetPingResponseObject); ok {
		if err := validResponse.VisitGetPingResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
