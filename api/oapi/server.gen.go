// Package httpapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package httpapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	fmtvalidate "github.com/Onnywrite/ssonny/pkg/fmtvalidate"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v3"
	"github.com/oapi-codegen/runtime"
) // ServerInterface represents all server handlers.
type ServerInterface interface {
	// Verify access token validity.
	// (GET /auth/check)
	GetAuthCheck(c fiber.Ctx) error
	// Log in a user with their password.
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(c fiber.Ctx, params PostAuthLoginWithPasswordParams) error
	// Log out a user.
	// (POST /auth/logout)
	PostAuthLogout(c fiber.Ctx) error
	// Refresh access and refresh tokens.
	// (POST /auth/refresh)
	PostAuthRefresh(c fiber.Ctx) error
	// Register a new user with password authentication.
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(c fiber.Ctx, params PostAuthRegisterWithPasswordParams) error
	// Verify a user's email address.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(c fiber.Ctx) error
	// Check the server's health status.
	// (GET /healthz)
	GetHealthz(c fiber.Ctx) error
	// Retrieve OpenTelemetry metrics.
	// (GET /metrics)
	GetMetrics(c fiber.Ctx) error
	// Check if the server is responsive.
	// (GET /ping)
	GetPing(c fiber.Ctx) error
	// Retrieve a user's profile.
	// (GET /profile)
	GetProfile(c fiber.Ctx) error
	// Update a user's profile.
	// (PUT /profile)
	PutProfile(c fiber.Ctx) error
	// Update a user's password.
	// (PUT /profile/password)
	PutProfilePassword(c fiber.Ctx, params PutProfilePasswordParams) error
	// Resets a user's password.
	// (DELETE /profile/password/reset)
	DeleteProfilePasswordReset(c fiber.Ctx) error
	// Sets new password, if it is reset.
	// (POST /profile/password/reset)
	PostProfilePasswordReset(c fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetAuthCheck operation middleware
func (siw *ServerInterfaceWrapper) GetAuthCheck(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{})

	return siw.Handler.GetAuthCheck(c)
}

// PostAuthLoginWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLoginWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthLoginWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthLoginWithPassword(c, params)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c fiber.Ctx) error {

	return siw.Handler.PostAuthLogout(c)
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(c fiber.Ctx) error {

	return siw.Handler.PostAuthRefresh(c)
}

// PostAuthRegisterWithPassword operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegisterWithPassword(c fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthRegisterWithPasswordParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "User-Agent" -------------
	if values, found := headers[http.CanonicalHeaderKey("User-Agent")]; found {
		var UserAgent UserAgent

		err = runtime.BindStyledParameterWithOptions("simple", "User-Agent", values[0], &UserAgent, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter User-Agent: %w", err).Error())
		}

		params.UserAgent = UserAgent

	} else {
		err = fmt.Errorf("header parameter User-Agent is required, but not found: %w", err)
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}

	return siw.Handler.PostAuthRegisterWithPassword(c, params)
}

// PostAuthVerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) PostAuthVerifyEmail(c fiber.Ctx) error {

	return siw.Handler.PostAuthVerifyEmail(c)
}

// GetHealthz operation middleware
func (siw *ServerInterfaceWrapper) GetHealthz(c fiber.Ctx) error {

	return siw.Handler.GetHealthz(c)
}

// GetMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetMetrics(c fiber.Ctx) error {

	return siw.Handler.GetMetrics(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c fiber.Ctx) error {

	return siw.Handler.GetPing(c)
}

// GetProfile operation middleware
func (siw *ServerInterfaceWrapper) GetProfile(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"get:profile", "profile"})

	return siw.Handler.GetProfile(c)
}

// PutProfile operation middleware
func (siw *ServerInterfaceWrapper) PutProfile(c fiber.Ctx) error {

	c.Locals(BearerAuthScopes, []string{"put:profile", "profile"})

	return siw.Handler.PutProfile(c)
}

// PutProfilePassword operation middleware
func (siw *ServerInterfaceWrapper) PutProfilePassword(c fiber.Ctx) error {

	var err error

	c.Locals(BearerAuthScopes, []string{"put:profile/password"})

	// Parameter object where we will unmarshal all parameters from the context
	var params PutProfilePasswordParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "skip_limiter" -------------

	err = runtime.BindQueryParameter("form", true, false, "skip_limiter", query, &params.SkipLimiter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter skip_limiter: %w", err).Error())
	}

	headers := c.GetReqHeaders()

	// ------------- Optional header parameter "X-Skip-Limiter" -------------
	if values, found := headers[http.CanonicalHeaderKey("X-Skip-Limiter")]; found {
		var XSkipLimiter SkipLimiterHeader

		err = runtime.BindStyledParameterWithOptions("simple", "X-Skip-Limiter", values[0], &XSkipLimiter, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("invalid format for parameter X-Skip-Limiter: %w", err).Error())
		}

		params.XSkipLimiter = &XSkipLimiter

	}

	return siw.Handler.PutProfilePassword(c, params)
}

// DeleteProfilePasswordReset operation middleware
func (siw *ServerInterfaceWrapper) DeleteProfilePasswordReset(c fiber.Ctx) error {

	return siw.Handler.DeleteProfilePasswordReset(c)
}

// PostProfilePasswordReset operation middleware
func (siw *ServerInterfaceWrapper) PostProfilePasswordReset(c fiber.Ctx) error {

	return siw.Handler.PostProfilePasswordReset(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	Middlewares         []fiber.Handler
	EndpointMiddlewares map[string][]fiber.Handler
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// created by github.com/Onnywrite
// Constants for all endpoints
const (
	// GET /auth/check: Verify access token validity.
	EP_GetAuthCheck = "GET /auth/check"
	// POST /auth/loginWithPassword: Log in a user with their password.
	EP_PostAuthLoginWithPassword = "POST /auth/loginWithPassword"
	// POST /auth/logout: Log out a user.
	EP_PostAuthLogout = "POST /auth/logout"
	// POST /auth/refresh: Refresh access and refresh tokens.
	EP_PostAuthRefresh = "POST /auth/refresh"
	// POST /auth/registerWithPassword: Register a new user with password authentication.
	EP_PostAuthRegisterWithPassword = "POST /auth/registerWithPassword"
	// POST /auth/verify/email: Verify a user's email address.
	EP_PostAuthVerifyEmail = "POST /auth/verify/email"
	// GET /healthz: Check the server's health status.
	EP_GetHealthz = "GET /healthz"
	// GET /metrics: Retrieve OpenTelemetry metrics.
	EP_GetMetrics = "GET /metrics"
	// GET /ping: Check if the server is responsive.
	EP_GetPing = "GET /ping"
	// GET /profile: Retrieve a user's profile.
	EP_GetProfile = "GET /profile"
	// PUT /profile: Update a user's profile.
	EP_PutProfile = "PUT /profile"
	// PUT /profile/password: Update a user's password.
	EP_PutProfilePassword = "PUT /profile/password"
	// DELETE /profile/password/reset: Resets a user's password.
	EP_DeleteProfilePasswordReset = "DELETE /profile/password/reset"
	// POST /profile/password/reset: Sets new password, if it is reset.
	EP_PostProfilePasswordReset = "POST /profile/password/reset"
)

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	mws := func(ep string) []fiber.Handler {
		return options.EndpointMiddlewares[ep]
	}

	router.Get("/auth/check", wrapper.GetAuthCheck, mws(EP_GetAuthCheck)...)
	router.Post("/auth/loginWithPassword", wrapper.PostAuthLoginWithPassword, mws(EP_PostAuthLoginWithPassword)...)
	router.Post("/auth/logout", wrapper.PostAuthLogout, mws(EP_PostAuthLogout)...)
	router.Post("/auth/refresh", wrapper.PostAuthRefresh, mws(EP_PostAuthRefresh)...)
	router.Post("/auth/registerWithPassword", wrapper.PostAuthRegisterWithPassword, mws(EP_PostAuthRegisterWithPassword)...)
	router.Post("/auth/verify/email", wrapper.PostAuthVerifyEmail, mws(EP_PostAuthVerifyEmail)...)
	router.Get("/healthz", wrapper.GetHealthz, mws(EP_GetHealthz)...)
	router.Get("/metrics", wrapper.GetMetrics, mws(EP_GetMetrics)...)
	router.Get("/ping", wrapper.GetPing, mws(EP_GetPing)...)
	router.Get("/profile", wrapper.GetProfile, mws(EP_GetProfile)...)
	router.Put("/profile", wrapper.PutProfile, mws(EP_PutProfile)...)
	router.Put("/profile/password", wrapper.PutProfilePassword, mws(EP_PutProfilePassword)...)
	router.Delete("/profile/password/reset", wrapper.DeleteProfilePasswordReset, mws(EP_DeleteProfilePasswordReset)...)
	router.Post("/profile/password/reset", wrapper.PostProfilePasswordReset, mws(EP_PostProfilePasswordReset)...)

}

type GetAuthCheckRequestObject struct {
}

type GetAuthCheckResponseObject interface {
	VisitGetAuthCheckResponse(ctx fiber.Ctx) error
}

type GetAuthCheck200Response struct {
}

func (response GetAuthCheck200Response) VisitGetAuthCheckResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GetAuthCheck401JSONResponse Err

func (response GetAuthCheck401JSONResponse) VisitGetAuthCheckResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPasswordRequestObject struct {
	Params PostAuthLoginWithPasswordParams
	Body   *PostAuthLoginWithPasswordJSONRequestBody
}

type PostAuthLoginWithPasswordResponseObject interface {
	VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthLoginWithPassword200JSONResponse AuthenticatedUser

func (response PostAuthLoginWithPassword200JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword400JSONResponse ValidationError

func (response PostAuthLoginWithPassword400JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthLoginWithPassword404JSONResponse Err

func (response PostAuthLoginWithPassword404JSONResponse) VisitPostAuthLoginWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PostAuthLogoutRequestObject struct {
	Body *PostAuthLogoutJSONRequestBody
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(ctx fiber.Ctx) error
}

type PostAuthLogout200Response struct {
}

func (response PostAuthLogout200Response) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthLogout401JSONResponse Err

func (response PostAuthLogout401JSONResponse) VisitPostAuthLogoutResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRefreshRequestObject struct {
	Body *PostAuthRefreshJSONRequestBody
}

type PostAuthRefreshResponseObject interface {
	VisitPostAuthRefreshResponse(ctx fiber.Ctx) error
}

type PostAuthRefresh200JSONResponse Tokens

func (response PostAuthRefresh200JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostAuthRefresh401JSONResponse Err

func (response PostAuthRefresh401JSONResponse) VisitPostAuthRefreshResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPasswordRequestObject struct {
	Params PostAuthRegisterWithPasswordParams
	Body   *PostAuthRegisterWithPasswordJSONRequestBody
}

type PostAuthRegisterWithPasswordResponseObject interface {
	VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error
}

type PostAuthRegisterWithPassword201JSONResponse AuthenticatedUser

func (response PostAuthRegisterWithPassword201JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword400JSONResponse ValidationError

func (response PostAuthRegisterWithPassword400JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostAuthRegisterWithPassword409JSONResponse Err

func (response PostAuthRegisterWithPassword409JSONResponse) VisitPostAuthRegisterWithPasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PostAuthVerifyEmailRequestObject struct {
	Body *PostAuthVerifyEmailJSONRequestBody
}

type PostAuthVerifyEmailResponseObject interface {
	VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error
}

type PostAuthVerifyEmail200Response struct {
}

func (response PostAuthVerifyEmail200Response) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostAuthVerifyEmail400JSONResponse ValidationError

func (response PostAuthVerifyEmail400JSONResponse) VisitPostAuthVerifyEmailResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetHealthzRequestObject struct {
}

type GetHealthzResponseObject interface {
	VisitGetHealthzResponse(ctx fiber.Ctx) error
}

type GetHealthz200TextResponse string

func (response GetHealthz200TextResponse) VisitGetHealthzResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetMetricsRequestObject struct {
}

type GetMetricsResponseObject interface {
	VisitGetMetricsResponse(ctx fiber.Ctx) error
}

type GetMetrics200JSONResponse map[string]interface{}

func (response GetMetrics200JSONResponse) VisitGetMetricsResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetPingRequestObject struct {
}

type GetPingResponseObject interface {
	VisitGetPingResponse(ctx fiber.Ctx) error
}

type GetPing200TextResponse string

func (response GetPing200TextResponse) VisitGetPingResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "text/plain")
	ctx.Status(200)

	_, err := ctx.WriteString(string(response))
	return err
}

type GetProfileRequestObject struct {
}

type GetProfileResponseObject interface {
	VisitGetProfileResponse(ctx fiber.Ctx) error
}

type GetProfile200JSONResponse Profile

func (response GetProfile200JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetProfile401JSONResponse Err

func (response GetProfile401JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetProfile403JSONResponse Err

func (response GetProfile403JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type GetProfile404JSONResponse Err

func (response GetProfile404JSONResponse) VisitGetProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfileRequestObject struct {
	Body *PutProfileJSONRequestBody
}

type PutProfileResponseObject interface {
	VisitPutProfileResponse(ctx fiber.Ctx) error
}

type PutProfile200JSONResponse Profile

func (response PutProfile200JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PutProfile400JSONResponse ValidationError

func (response PutProfile400JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutProfile401JSONResponse Err

func (response PutProfile401JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PutProfile403JSONResponse Err

func (response PutProfile403JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PutProfile404JSONResponse Err

func (response PutProfile404JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfile409JSONResponse Err

func (response PutProfile409JSONResponse) VisitPutProfileResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(409)

	return ctx.JSON(&response)
}

type PutProfilePasswordRequestObject struct {
	Params PutProfilePasswordParams
	Body   *PutProfilePasswordJSONRequestBody
}

type PutProfilePasswordResponseObject interface {
	VisitPutProfilePasswordResponse(ctx fiber.Ctx) error
}

type PutProfilePassword200Response struct {
}

func (response PutProfilePassword200Response) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PutProfilePassword400JSONResponse ValidationError

func (response PutProfilePassword400JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutProfilePassword401JSONResponse Err

func (response PutProfilePassword401JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type PutProfilePassword403JSONResponse Err

func (response PutProfilePassword403JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PutProfilePassword404JSONResponse Err

func (response PutProfilePassword404JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type PutProfilePassword429ResponseHeaders struct {
	RetryAfter int32
}

type PutProfilePassword429JSONResponse struct {
	Body    Err
	Headers PutProfilePassword429ResponseHeaders
}

func (response PutProfilePassword429JSONResponse) VisitPutProfilePasswordResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Retry-After", fmt.Sprint(response.Headers.RetryAfter))
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(429)

	return ctx.JSON(&response.Body)
}

type DeleteProfilePasswordResetRequestObject struct {
	Body *DeleteProfilePasswordResetJSONRequestBody
}

type DeleteProfilePasswordResetResponseObject interface {
	VisitDeleteProfilePasswordResetResponse(ctx fiber.Ctx) error
}

type DeleteProfilePasswordReset200Response struct {
}

func (response DeleteProfilePasswordReset200Response) VisitDeleteProfilePasswordResetResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type DeleteProfilePasswordReset400JSONResponse ValidationError

func (response DeleteProfilePasswordReset400JSONResponse) VisitDeleteProfilePasswordResetResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type DeleteProfilePasswordReset403JSONResponse Err

func (response DeleteProfilePasswordReset403JSONResponse) VisitDeleteProfilePasswordResetResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostProfilePasswordResetRequestObject struct {
	Body *PostProfilePasswordResetJSONRequestBody
}

type PostProfilePasswordResetResponseObject interface {
	VisitPostProfilePasswordResetResponse(ctx fiber.Ctx) error
}

type PostProfilePasswordReset200Response struct {
}

func (response PostProfilePasswordReset200Response) VisitPostProfilePasswordResetResponse(ctx fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type PostProfilePasswordReset400JSONResponse ValidationError

func (response PostProfilePasswordReset400JSONResponse) VisitPostProfilePasswordResetResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostProfilePasswordReset403JSONResponse Err

func (response PostProfilePasswordReset403JSONResponse) VisitPostProfilePasswordResetResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type PostProfilePasswordReset404JSONResponse Err

func (response PostProfilePasswordReset404JSONResponse) VisitPostProfilePasswordResetResponse(ctx fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Verify access token validity.
	// (GET /auth/check)
	GetAuthCheck(ctx context.Context, request GetAuthCheckRequestObject) (GetAuthCheckResponseObject, error)
	// Log in a user with their password.
	// (POST /auth/loginWithPassword)
	PostAuthLoginWithPassword(ctx context.Context, request PostAuthLoginWithPasswordRequestObject) (PostAuthLoginWithPasswordResponseObject, error)
	// Log out a user.
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Refresh access and refresh tokens.
	// (POST /auth/refresh)
	PostAuthRefresh(ctx context.Context, request PostAuthRefreshRequestObject) (PostAuthRefreshResponseObject, error)
	// Register a new user with password authentication.
	// (POST /auth/registerWithPassword)
	PostAuthRegisterWithPassword(ctx context.Context, request PostAuthRegisterWithPasswordRequestObject) (PostAuthRegisterWithPasswordResponseObject, error)
	// Verify a user's email address.
	// (POST /auth/verify/email)
	PostAuthVerifyEmail(ctx context.Context, request PostAuthVerifyEmailRequestObject) (PostAuthVerifyEmailResponseObject, error)
	// Check the server's health status.
	// (GET /healthz)
	GetHealthz(ctx context.Context, request GetHealthzRequestObject) (GetHealthzResponseObject, error)
	// Retrieve OpenTelemetry metrics.
	// (GET /metrics)
	GetMetrics(ctx context.Context, request GetMetricsRequestObject) (GetMetricsResponseObject, error)
	// Check if the server is responsive.
	// (GET /ping)
	GetPing(ctx context.Context, request GetPingRequestObject) (GetPingResponseObject, error)
	// Retrieve a user's profile.
	// (GET /profile)
	GetProfile(ctx context.Context, request GetProfileRequestObject) (GetProfileResponseObject, error)
	// Update a user's profile.
	// (PUT /profile)
	PutProfile(ctx context.Context, request PutProfileRequestObject) (PutProfileResponseObject, error)
	// Update a user's password.
	// (PUT /profile/password)
	PutProfilePassword(ctx context.Context, request PutProfilePasswordRequestObject) (PutProfilePasswordResponseObject, error)
	// Resets a user's password.
	// (DELETE /profile/password/reset)
	DeleteProfilePasswordReset(ctx context.Context, request DeleteProfilePasswordResetRequestObject) (DeleteProfilePasswordResetResponseObject, error)
	// Sets new password, if it is reset.
	// (POST /profile/password/reset)
	PostProfilePasswordReset(ctx context.Context, request PostProfilePasswordResetRequestObject) (PostProfilePasswordResetResponseObject, error)
}
type StrictHandlerFunc func(ctx fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAuthCheck operation middleware
func (sh *strictHandler) GetAuthCheck(ctx fiber.Ctx) error {
	var request GetAuthCheckRequestObject

	response, err := sh.ssi.GetAuthCheck(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetAuthCheckResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthLoginWithPassword operation middleware
func (sh *strictHandler) PostAuthLoginWithPassword(ctx fiber.Ctx, params PostAuthLoginWithPasswordParams) error {
	var request PostAuthLoginWithPasswordRequestObject

	request.Params = params

	var body PostAuthLoginWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthLoginWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthLoginWithPasswordResponse(ctx)
	}

	response, err := sh.ssi.PostAuthLoginWithPassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthLoginWithPasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx fiber.Ctx) error {
	var request PostAuthLogoutRequestObject

	var body PostAuthLogoutJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	response, err := sh.ssi.PostAuthLogout(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthLogoutResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthRefresh operation middleware
func (sh *strictHandler) PostAuthRefresh(ctx fiber.Ctx) error {
	var request PostAuthRefreshRequestObject

	var body PostAuthRefreshJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	response, err := sh.ssi.PostAuthRefresh(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthRefreshResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthRegisterWithPassword operation middleware
func (sh *strictHandler) PostAuthRegisterWithPassword(ctx fiber.Ctx, params PostAuthRegisterWithPasswordParams) error {
	var request PostAuthRegisterWithPasswordRequestObject

	request.Params = params

	var body PostAuthRegisterWithPasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthRegisterWithPassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthRegisterWithPasswordResponse(ctx)
	}

	response, err := sh.ssi.PostAuthRegisterWithPassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthRegisterWithPasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostAuthVerifyEmail operation middleware
func (sh *strictHandler) PostAuthVerifyEmail(ctx fiber.Ctx) error {
	var request PostAuthVerifyEmailRequestObject

	var body PostAuthVerifyEmailJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostAuthVerifyEmail400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostAuthVerifyEmailResponse(ctx)
	}

	response, err := sh.ssi.PostAuthVerifyEmail(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostAuthVerifyEmailResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetHealthz operation middleware
func (sh *strictHandler) GetHealthz(ctx fiber.Ctx) error {
	var request GetHealthzRequestObject

	response, err := sh.ssi.GetHealthz(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetHealthzResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetMetrics operation middleware
func (sh *strictHandler) GetMetrics(ctx fiber.Ctx) error {
	var request GetMetricsRequestObject

	response, err := sh.ssi.GetMetrics(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetMetricsResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetPing operation middleware
func (sh *strictHandler) GetPing(ctx fiber.Ctx) error {
	var request GetPingRequestObject

	response, err := sh.ssi.GetPing(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetPingResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// GetProfile operation middleware
func (sh *strictHandler) GetProfile(ctx fiber.Ctx) error {
	var request GetProfileRequestObject

	response, err := sh.ssi.GetProfile(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitGetProfileResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PutProfile operation middleware
func (sh *strictHandler) PutProfile(ctx fiber.Ctx) error {
	var request PutProfileRequestObject

	var body PutProfileJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PutProfile400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPutProfileResponse(ctx)
	}

	response, err := sh.ssi.PutProfile(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPutProfileResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PutProfilePassword operation middleware
func (sh *strictHandler) PutProfilePassword(ctx fiber.Ctx, params PutProfilePasswordParams) error {
	var request PutProfilePasswordRequestObject

	request.Params = params

	var body PutProfilePasswordJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PutProfilePassword400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPutProfilePasswordResponse(ctx)
	}

	response, err := sh.ssi.PutProfilePassword(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPutProfilePasswordResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// DeleteProfilePasswordReset operation middleware
func (sh *strictHandler) DeleteProfilePasswordReset(ctx fiber.Ctx) error {
	var request DeleteProfilePasswordResetRequestObject

	var body DeleteProfilePasswordResetJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return DeleteProfilePasswordReset400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitDeleteProfilePasswordResetResponse(ctx)
	}

	response, err := sh.ssi.DeleteProfilePasswordReset(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitDeleteProfilePasswordResetResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// PostProfilePasswordReset operation middleware
func (sh *strictHandler) PostProfilePasswordReset(ctx fiber.Ctx) error {
	var request PostProfilePasswordResetRequestObject

	var body PostProfilePasswordResetJSONRequestBody
	if err := ctx.Bind().JSON(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// validation by https://github.com/Onnywrite
	if err := fmtvalidate.V.StructCtx(ctx.Context(), body); err != nil {
		return PostProfilePasswordReset400JSONResponse{
			Service: ValidationErrorServiceSsonny,
			Fields:  fmtvalidate.FormatFields(err),
		}.VisitPostProfilePasswordResetResponse(ctx)
	}

	response, err := sh.ssi.PostProfilePasswordReset(ctx.Context(), request)
	if err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	if err := response.VisitPostProfilePasswordResetResponse(ctx); err != nil {
		return fiber.NewError(fiber.StatusInternalServerError, err.Error())
	}

	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"v/64/v8AAAD//1PM5AgpSQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
