// Package httpapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package httpapi

import (
	"time"

	googleuuid "github.com/google/uuid"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ErrService.
const (
	ErrServiceSsonny ErrService = "ssonny"
)

// Defines values for ValidationErrorService.
const (
	ValidationErrorServiceSsonny ValidationErrorService = "ssonny"
)

// AuthenticatedUser defines model for AuthenticatedUser.
type AuthenticatedUser struct {
	Access  string  `json:"Access"`
	Profile Profile `json:"Profile"`
	Refresh string  `json:"Refresh"`
}

// Err defines model for Err.
type Err struct {
	Message string     `json:"Message"`
	Service ErrService `json:"Service"`
}

// ErrService defines model for Err.Service.
type ErrService string

// Profile defines model for Profile.
type Profile struct {
	Birthday  *string         `json:"Birthday"`
	CreatedAt time.Time       `json:"CreatedAt"`
	Email     string          `json:"Email"`
	Gender    *string         `json:"Gender"`
	Id        googleuuid.UUID `json:"Id"`
	Nickname  *string         `json:"Nickname"`
	UpdatedAt time.Time       `json:"UpdatedAt"`
	Verified  bool            `json:"Verified"`
}

// Tokens defines model for Tokens.
type Tokens struct {
	Access  string `json:"Access"`
	Refresh string `json:"Refresh"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Fields  map[string]interface{} `json:"Fields"`
	Service ValidationErrorService `json:"Service"`
}

// ValidationErrorService defines model for ValidationError.Service.
type ValidationErrorService string

// SkipLimiterHeader defines model for SkipLimiterHeader.
type SkipLimiterHeader = bool

// SkipLimiterQuery defines model for SkipLimiterQuery.
type SkipLimiterQuery = bool

// UserAgent defines model for UserAgent.
type UserAgent = string

// DeleteResetPassword defines model for DeleteResetPassword.
type DeleteResetPassword struct {
	Email    *string `json:"Email,omitempty" validate:"omitempty,email,max=345"`
	Nickname *string `json:"Nickname,omitempty" validate:"omitempty,min=3,max=32"`
	Strategy string  `json:"Strategy"`
}

// LoginWithPassword defines model for LoginWithPassword.
type LoginWithPassword struct {
	Email    *string `json:"Email,omitempty" validate:"omitempty,email,max=345"`
	Nickname *string `json:"Nickname,omitempty" validate:"omitempty,min=3,max=32"`
	Password string  `json:"Password" validate:"min=8,max=72"`
}

// PostResetPassword defines model for PostResetPassword.
type PostResetPassword struct {
	NewPassword string `json:"NewPassword" validate:"min=8,max=72"`
	Token       string `json:"Token" validate:"required"`
}

// Refresh defines model for Refresh.
type Refresh struct {
	RefreshToken string `json:"RefreshToken"`
}

// RegisterWithPassword defines model for RegisterWithPassword.
type RegisterWithPassword struct {
	Birthday *string `json:"Birthday,omitempty" validate:"omitempty,datetime=2006-01-02"`
	Email    string  `json:"Email" validate:"email,max=345"`
	Gender   *string `json:"Gender,omitempty" validate:"omitempty,max=16"`
	Nickname *string `json:"Nickname,omitempty" validate:"omitempty,min=3,max=32"`
	Password string  `json:"Password" validate:"min=8,max=72"`
}

// UpdatePassword defines model for UpdatePassword.
type UpdatePassword struct {
	CurrentPassword string `json:"CurrentPassword" validate:"min=8,max=72"`
	NewPassword     string `json:"NewPassword" validate:"min=8,max=72"`
}

// UpdateProfile defines model for UpdateProfile.
type UpdateProfile struct {
	Birthday *string `json:"Birthday,omitempty" validate:"omitempty,datetime=2006-01-02"`
	Gender   *string `json:"Gender,omitempty" validate:"omitempty,max=16"`
	Nickname *string `json:"Nickname,omitempty" validate:"omitempty,min=3,max=32"`
}

// VerifyEmail defines model for VerifyEmail.
type VerifyEmail struct {
	Token string `json:"Token"`
}

// PostAuthLoginWithPasswordJSONBody defines parameters for PostAuthLoginWithPassword.
type PostAuthLoginWithPasswordJSONBody struct {
	Email    *string `json:"Email,omitempty" validate:"omitempty,email,max=345"`
	Nickname *string `json:"Nickname,omitempty" validate:"omitempty,min=3,max=32"`
	Password string  `json:"Password" validate:"min=8,max=72"`
}

// PostAuthLoginWithPasswordParams defines parameters for PostAuthLoginWithPassword.
type PostAuthLoginWithPasswordParams struct {
	// UserAgent Standard HTTP header sent by most browsers. You can typically ignore this.
	UserAgent UserAgent `json:"User-Agent"`
}

// PostAuthLogoutJSONBody defines parameters for PostAuthLogout.
type PostAuthLogoutJSONBody struct {
	RefreshToken string `json:"RefreshToken"`
}

// PostAuthRefreshJSONBody defines parameters for PostAuthRefresh.
type PostAuthRefreshJSONBody struct {
	RefreshToken string `json:"RefreshToken"`
}

// PostAuthRegisterWithPasswordJSONBody defines parameters for PostAuthRegisterWithPassword.
type PostAuthRegisterWithPasswordJSONBody struct {
	Birthday *string `json:"Birthday,omitempty" validate:"omitempty,datetime=2006-01-02"`
	Email    string  `json:"Email" validate:"email,max=345"`
	Gender   *string `json:"Gender,omitempty" validate:"omitempty,max=16"`
	Nickname *string `json:"Nickname,omitempty" validate:"omitempty,min=3,max=32"`
	Password string  `json:"Password" validate:"min=8,max=72"`
}

// PostAuthRegisterWithPasswordParams defines parameters for PostAuthRegisterWithPassword.
type PostAuthRegisterWithPasswordParams struct {
	// UserAgent Standard HTTP header sent by most browsers. You can typically ignore this.
	UserAgent UserAgent `json:"User-Agent"`
}

// PostAuthVerifyEmailJSONBody defines parameters for PostAuthVerifyEmail.
type PostAuthVerifyEmailJSONBody struct {
	Token string `json:"Token"`
}

// PutProfileJSONBody defines parameters for PutProfile.
type PutProfileJSONBody struct {
	Birthday *string `json:"Birthday,omitempty" validate:"omitempty,datetime=2006-01-02"`
	Gender   *string `json:"Gender,omitempty" validate:"omitempty,max=16"`
	Nickname *string `json:"Nickname,omitempty" validate:"omitempty,min=3,max=32"`
}

// PutProfilePasswordJSONBody defines parameters for PutProfilePassword.
type PutProfilePasswordJSONBody struct {
	CurrentPassword string `json:"CurrentPassword" validate:"min=8,max=72"`
	NewPassword     string `json:"NewPassword" validate:"min=8,max=72"`
}

// PutProfilePasswordParams defines parameters for PutProfilePassword.
type PutProfilePasswordParams struct {
	// SkipLimiter Allows you to bypass the rate limiter when you're working on localhost.
	// Value is not important.
	SkipLimiter *SkipLimiterQuery `form:"skip_limiter,omitempty" json:"skip_limiter,omitempty"`

	// XSkipLimiter Allows you to bypass the rate limiter when you're working on localhost.
	// Value is not important.
	XSkipLimiter *SkipLimiterHeader `json:"X-Skip-Limiter,omitempty"`
}

// DeleteProfilePasswordResetJSONBody defines parameters for DeleteProfilePasswordReset.
type DeleteProfilePasswordResetJSONBody struct {
	Email    *string `json:"Email,omitempty" validate:"omitempty,email,max=345"`
	Nickname *string `json:"Nickname,omitempty" validate:"omitempty,min=3,max=32"`
	Strategy string  `json:"Strategy"`
}

// PostProfilePasswordResetJSONBody defines parameters for PostProfilePasswordReset.
type PostProfilePasswordResetJSONBody struct {
	NewPassword string `json:"NewPassword" validate:"min=8,max=72"`
	Token       string `json:"Token" validate:"required"`
}

// PostAuthLoginWithPasswordJSONRequestBody defines body for PostAuthLoginWithPassword for application/json ContentType.
type PostAuthLoginWithPasswordJSONRequestBody PostAuthLoginWithPasswordJSONBody

// PostAuthLogoutJSONRequestBody defines body for PostAuthLogout for application/json ContentType.
type PostAuthLogoutJSONRequestBody PostAuthLogoutJSONBody

// PostAuthRefreshJSONRequestBody defines body for PostAuthRefresh for application/json ContentType.
type PostAuthRefreshJSONRequestBody PostAuthRefreshJSONBody

// PostAuthRegisterWithPasswordJSONRequestBody defines body for PostAuthRegisterWithPassword for application/json ContentType.
type PostAuthRegisterWithPasswordJSONRequestBody PostAuthRegisterWithPasswordJSONBody

// PostAuthVerifyEmailJSONRequestBody defines body for PostAuthVerifyEmail for application/json ContentType.
type PostAuthVerifyEmailJSONRequestBody PostAuthVerifyEmailJSONBody

// PutProfileJSONRequestBody defines body for PutProfile for application/json ContentType.
type PutProfileJSONRequestBody PutProfileJSONBody

// PutProfilePasswordJSONRequestBody defines body for PutProfilePassword for application/json ContentType.
type PutProfilePasswordJSONRequestBody PutProfilePasswordJSONBody

// DeleteProfilePasswordResetJSONRequestBody defines body for DeleteProfilePasswordReset for application/json ContentType.
type DeleteProfilePasswordResetJSONRequestBody DeleteProfilePasswordResetJSONBody

// PostProfilePasswordResetJSONRequestBody defines body for PostProfilePasswordReset for application/json ContentType.
type PostProfilePasswordResetJSONRequestBody PostProfilePasswordResetJSONBody
