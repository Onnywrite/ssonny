// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/Onnywrite/ssonny/internal/storage/repo"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TokenRepo is an autogenerated mock type for the TokenRepo type
type TokenRepo struct {
	mock.Mock
}

type TokenRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenRepo) EXPECT() *TokenRepo_Expecter {
	return &TokenRepo_Expecter{mock: &_m.Mock}
}

// SaveToken provides a mock function with given fields: ctx, userId, appId, rotation
func (_m *TokenRepo) SaveToken(ctx context.Context, userId uuid.UUID, appId uint64, rotation uint64) (uint64, repo.Transactor, error) {
	ret := _m.Called(ctx, userId, appId, rotation)

	if len(ret) == 0 {
		panic("no return value specified for SaveToken")
	}

	var r0 uint64
	var r1 repo.Transactor
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64, uint64) (uint64, repo.Transactor, error)); ok {
		return rf(ctx, userId, appId, rotation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint64, uint64) uint64); ok {
		r0 = rf(ctx, userId, appId, rotation)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uint64, uint64) repo.Transactor); ok {
		r1 = rf(ctx, userId, appId, rotation)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(repo.Transactor)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, uint64, uint64) error); ok {
		r2 = rf(ctx, userId, appId, rotation)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TokenRepo_SaveToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveToken'
type TokenRepo_SaveToken_Call struct {
	*mock.Call
}

// SaveToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
//   - appId uint64
//   - rotation uint64
func (_e *TokenRepo_Expecter) SaveToken(ctx interface{}, userId interface{}, appId interface{}, rotation interface{}) *TokenRepo_SaveToken_Call {
	return &TokenRepo_SaveToken_Call{Call: _e.mock.On("SaveToken", ctx, userId, appId, rotation)}
}

func (_c *TokenRepo_SaveToken_Call) Run(run func(ctx context.Context, userId uuid.UUID, appId uint64, rotation uint64)) *TokenRepo_SaveToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *TokenRepo_SaveToken_Call) Return(_a0 uint64, _a1 repo.Transactor, _a2 error) *TokenRepo_SaveToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TokenRepo_SaveToken_Call) RunAndReturn(run func(context.Context, uuid.UUID, uint64, uint64) (uint64, repo.Transactor, error)) *TokenRepo_SaveToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenRepo creates a new instance of TokenRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepo {
	mock := &TokenRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
