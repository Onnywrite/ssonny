// Code generated by mockery v2.44.1. DO NOT EDIT.

package authmocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// TokenSigner is an autogenerated mock type for the TokenSigner type
type TokenSigner struct {
	mock.Mock
}

type TokenSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenSigner) EXPECT() *TokenSigner_Expecter {
	return &TokenSigner_Expecter{mock: &_m.Mock}
}

// SignAccess provides a mock function with given fields: userId, aud, authzParty, scopes
func (_m *TokenSigner) SignAccess(userId uuid.UUID, aud *uint64, authzParty string, scopes ...string) (string, error) {
	_va := make([]interface{}, len(scopes))
	for _i := range scopes {
		_va[_i] = scopes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, userId, aud, authzParty)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignAccess")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *uint64, string, ...string) (string, error)); ok {
		return rf(userId, aud, authzParty, scopes...)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, *uint64, string, ...string) string); ok {
		r0 = rf(userId, aud, authzParty, scopes...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, *uint64, string, ...string) error); ok {
		r1 = rf(userId, aud, authzParty, scopes...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenSigner_SignAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignAccess'
type TokenSigner_SignAccess_Call struct {
	*mock.Call
}

// SignAccess is a helper method to define mock.On call
//   - userId uuid.UUID
//   - aud *uint64
//   - authzParty string
//   - scopes ...string
func (_e *TokenSigner_Expecter) SignAccess(userId interface{}, aud interface{}, authzParty interface{}, scopes ...interface{}) *TokenSigner_SignAccess_Call {
	return &TokenSigner_SignAccess_Call{Call: _e.mock.On("SignAccess",
		append([]interface{}{userId, aud, authzParty}, scopes...)...)}
}

func (_c *TokenSigner_SignAccess_Call) Run(run func(userId uuid.UUID, aud *uint64, authzParty string, scopes ...string)) *TokenSigner_SignAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(uuid.UUID), args[1].(*uint64), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *TokenSigner_SignAccess_Call) Return(_a0 string, _a1 error) *TokenSigner_SignAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenSigner_SignAccess_Call) RunAndReturn(run func(uuid.UUID, *uint64, string, ...string) (string, error)) *TokenSigner_SignAccess_Call {
	_c.Call.Return(run)
	return _c
}

// SignRefresh provides a mock function with given fields: userId, aud, authzParty, rotation, jwtId
func (_m *TokenSigner) SignRefresh(userId uuid.UUID, aud *uint64, authzParty string, rotation uint64, jwtId uint64) (string, error) {
	ret := _m.Called(userId, aud, authzParty, rotation, jwtId)

	if len(ret) == 0 {
		panic("no return value specified for SignRefresh")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *uint64, string, uint64, uint64) (string, error)); ok {
		return rf(userId, aud, authzParty, rotation, jwtId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, *uint64, string, uint64, uint64) string); ok {
		r0 = rf(userId, aud, authzParty, rotation, jwtId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, *uint64, string, uint64, uint64) error); ok {
		r1 = rf(userId, aud, authzParty, rotation, jwtId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenSigner_SignRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignRefresh'
type TokenSigner_SignRefresh_Call struct {
	*mock.Call
}

// SignRefresh is a helper method to define mock.On call
//   - userId uuid.UUID
//   - aud *uint64
//   - authzParty string
//   - rotation uint64
//   - jwtId uint64
func (_e *TokenSigner_Expecter) SignRefresh(userId interface{}, aud interface{}, authzParty interface{}, rotation interface{}, jwtId interface{}) *TokenSigner_SignRefresh_Call {
	return &TokenSigner_SignRefresh_Call{Call: _e.mock.On("SignRefresh", userId, aud, authzParty, rotation, jwtId)}
}

func (_c *TokenSigner_SignRefresh_Call) Run(run func(userId uuid.UUID, aud *uint64, authzParty string, rotation uint64, jwtId uint64)) *TokenSigner_SignRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(*uint64), args[2].(string), args[3].(uint64), args[4].(uint64))
	})
	return _c
}

func (_c *TokenSigner_SignRefresh_Call) Return(_a0 string, _a1 error) *TokenSigner_SignRefresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenSigner_SignRefresh_Call) RunAndReturn(run func(uuid.UUID, *uint64, string, uint64, uint64) (string, error)) *TokenSigner_SignRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenSigner creates a new instance of TokenSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenSigner {
	mock := &TokenSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
