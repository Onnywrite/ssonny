// Code generated by mockery v2.45.0. DO NOT EDIT.

package appsmocks

import (
	context "context"

	models "github.com/Onnywrite/ssonny/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// AppRepo is an autogenerated mock type for the AppRepo type
type AppRepo struct {
	mock.Mock
}

type AppRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *AppRepo) EXPECT() *AppRepo_Expecter {
	return &AppRepo_Expecter{mock: &_m.Mock}
}

// SaveApp provides a mock function with given fields: _a0, _a1
func (_m *AppRepo) SaveApp(_a0 context.Context, _a1 models.App) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveApp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.App) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppRepo_SaveApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveApp'
type AppRepo_SaveApp_Call struct {
	*mock.Call
}

// SaveApp is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.App
func (_e *AppRepo_Expecter) SaveApp(_a0 interface{}, _a1 interface{}) *AppRepo_SaveApp_Call {
	return &AppRepo_SaveApp_Call{Call: _e.mock.On("SaveApp", _a0, _a1)}
}

func (_c *AppRepo_SaveApp_Call) Run(run func(_a0 context.Context, _a1 models.App)) *AppRepo_SaveApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.App))
	})
	return _c
}

func (_c *AppRepo_SaveApp_Call) Return(_a0 error) *AppRepo_SaveApp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AppRepo_SaveApp_Call) RunAndReturn(run func(context.Context, models.App) error) *AppRepo_SaveApp_Call {
	_c.Call.Return(run)
	return _c
}

// NewAppRepo creates a new instance of AppRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppRepo {
	mock := &AppRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
