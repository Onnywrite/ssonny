// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Onnywrite/ssonny/internal/domain/models"
	mock "github.com/stretchr/testify/mock"

	repo "github.com/Onnywrite/ssonny/internal/storage/repo"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// SaveUser provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) SaveUser(_a0 context.Context, _a1 models.User) (*models.User, repo.Transactor, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 *models.User
	var r1 repo.Transactor
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) (*models.User, repo.Transactor, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.User) *models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.User) repo.Transactor); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(repo.Transactor)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, models.User) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserRepo_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type UserRepo_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *UserRepo_Expecter) SaveUser(_a0 interface{}, _a1 interface{}) *UserRepo_SaveUser_Call {
	return &UserRepo_SaveUser_Call{Call: _e.mock.On("SaveUser", _a0, _a1)}
}

func (_c *UserRepo_SaveUser_Call) Run(run func(_a0 context.Context, _a1 models.User)) *UserRepo_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserRepo_SaveUser_Call) Return(_a0 *models.User, _a1 repo.Transactor, _a2 error) *UserRepo_SaveUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserRepo_SaveUser_Call) RunAndReturn(run func(context.Context, models.User) (*models.User, repo.Transactor, error)) *UserRepo_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UserRepo) UpdateUser(_a0 context.Context, _a1 models.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserRepo_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.User
func (_e *UserRepo_Expecter) UpdateUser(_a0 interface{}, _a1 interface{}) *UserRepo_UpdateUser_Call {
	return &UserRepo_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0, _a1)}
}

func (_c *UserRepo_UpdateUser_Call) Run(run func(_a0 context.Context, _a1 models.User)) *UserRepo_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UserRepo_UpdateUser_Call) Return(_a0 error) *UserRepo_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepo_UpdateUser_Call) RunAndReturn(run func(context.Context, models.User) error) *UserRepo_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
